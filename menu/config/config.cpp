#include "config.hpp"
#include <urlmon.h>    
#include <filesystem>
#include <fstream>
#include "../menu.hpp"
#include "../../utils/xor.hpp"
#pragma comment(lib, "Urlmon")

static std::string path = "C:/delusional/config/";

template <typename T>
static void read_value(const nlohmann::json& src, T& dest) {
	if (src.is_null()) return;

	dest = src.get<T>();
}

template <typename T>
static T read_value(const nlohmann::json& src) {
	if (src.is_null()) return T{};

	return src.get<T>();
}

template <typename T>
static void write_value(nlohmann::json& dest, const T& src) {
	dest = src;
}

namespace c {
	void create_directory() {
		directory = "C:/delusional";
		if (!std::filesystem::exists(directory))
			std::filesystem::create_directory(directory);

		directory_path = "C:/delusional/config";
		if (!std::filesystem::exists(directory_path))
			std::filesystem::create_directory(directory_path);
		else
			update_configs();

		directory_path_lua = "C:/delusional/lua";
		if (!std::filesystem::exists(directory_path_lua))
			std::filesystem::create_directory(directory_path_lua);

	}

	void update_configs() {
		configs.clear();

		for (const auto& entry : std::filesystem::directory_iterator{ directory_path }) {
			if (!entry.is_regular_file() || entry.path().extension() != (".json")) continue;

			const auto& file_name = entry.path().stem().string();
			configs.emplace_back(file_name);
		}
	}

	void create_file(const std::string_view name) {
		if (name.empty() || name.find_first_not_of(' ') == std::string_view::npos) return;
		if (std::find(configs.cbegin(), configs.cend(), name) != configs.cend()) return;

		configs.emplace_back(name);
		save(configs.size() - 1);
	}

	void delete_file(const std::size_t index) {
		if (configs.size() <= index) return;

		path.append(configs.at(index));
		path.append((".json"));
		std::filesystem::remove(path);
		path.erase(path.size() - configs.at(index).size() - 5);

		configs.erase(configs.cbegin() + index);
		configs.shrink_to_fit();
		update_configs;
	}

	void save(const std::size_t index) {
		nlohmann::json json;

		write_value(json[xs("menu")][xs("fade_speed")], menu::fade_speed);
		write_value(json[xs("menu")][xs("menu_accent[0]")], menu::menu_accent[0]);
		write_value(json[xs("menu")][xs("menu_accent[1]")], menu::menu_accent[1]);
		write_value(json[xs("menu")][xs("menu_accent[2]")], menu::menu_accent[2]);
		write_value(json[xs("skins")][xs("skin_custom_clr")], skins::skin_custom_clr);
		write_value(json[("skins")][("skin_modulation1[0]")], skins::skin_modulation1[0]);
		write_value(json[("skins")][("skin_modulation1[1]")], skins::skin_modulation1[1]);
		write_value(json[("skins")][("skin_modulation1[2]")], skins::skin_modulation1[2]);
		write_value(json[("skins")][("skin_modulation2[0]")], skins::skin_modulation2[0]);
		write_value(json[("skins")][("skin_modulation2[1]")], skins::skin_modulation2[1]);
		write_value(json[("skins")][("skin_modulation2[2]")], skins::skin_modulation2[2]);
		write_value(json[("skins")][("skin_modulation3[0]")], skins::skin_modulation3[0]);
		write_value(json[("skins")][("skin_modulation3[1]")], skins::skin_modulation3[1]);
		write_value(json[("skins")][("skin_modulation3[2]")], skins::skin_modulation3[2]);
		write_value(json[("skins")][("skin_modulation4[0]")], skins::skin_modulation4[0]);
		write_value(json[("skins")][("skin_modulation4[1]")], skins::skin_modulation4[1]);
		write_value(json[("skins")][("skin_modulation4[2]")], skins::skin_modulation4[2]);
		write_value(json[xs("skins")][xs("agent_changer")], skins::agent_changer);
		write_value(json[xs("skins")][xs("agent_t")], skins::agent_t);
		write_value(json[xs("skins")][xs("agent_ct")], skins::agent_ct);
		write_value(json[xs("skins")][xs("knife_changer_enable")], skins::knife_changer_enable);
		write_value(json[xs("skins")][xs("knife_changer_wear")], skins::knife_changer_wear);
		write_value(json[xs("skins")][xs("knife_changer_model")], skins::knife_changer_model);
		write_value(json[xs("skins")][xs("knife_changer_vector_paint_kit")], skins::knife_changer_vector_paint_kit);
		write_value(json[xs("skins")][xs("knife_changer_paint_kit")], skins::knife_changer_paint_kit);
		write_value(json[xs("skins")][xs("gloves_endable")], skins::gloves_endable);
		write_value(json[xs("skins")][xs("gloves_model")], skins::gloves_model);
		write_value(json[xs("skins")][xs("gloves_skin")], skins::gloves_skin);
		write_value(json[xs("skins")][xs("gloves_skin_id")], skins::gloves_skin_id);
		write_value(json[xs("skins")][xs("gloves_wear")], skins::gloves_wear);
		write_value(json[xs("skins")][xs("weapon_endable")], skins::weapon_endable);
		write_value(json[xs("movement")][xs("bhop")], movement::bhop);
		write_value(json[xs("movement")][xs("auto_strafe")], movement::auto_strafe);
		write_value(json[xs("movement")][xs("auto_strafe_key")], movement::auto_strafe_key);
		write_value(json[xs("movement")][xs("auto_strafe_key_s")], movement::auto_strafe_key_s);
		write_value(json[xs("movement")][xs("strafe_optimizer")], movement::strafe_optimizer);
		write_value(json[xs("movement")][xs("strafe_optimizer_key")], movement::strafe_optimizer_key);
		write_value(json[xs("movement")][xs("strafe_optimizer_key_s")], movement::strafe_optimizer_key_s);
		write_value(json[xs("movement")][xs("strafe_optimizer_required_speed")], movement::strafe_optimizer_required_speed);
		write_value(json[xs("movement")][xs("strafe_optimizer_desired_gain")], movement::strafe_optimizer_desired_gain);
		write_value(json[xs("movement")][xs("mouse_strafe_limiter")], movement::mouse_strafe_limiter);
		write_value(json[xs("movement")][xs("mouse_strafe_limiter_affect_pitch")], movement::mouse_strafe_limiter_affect_pitch);
		write_value(json[xs("movement")][xs("mouse_strafe_limiter_key")], movement::mouse_strafe_limiter_key);
		write_value(json[xs("movement")][xs("mouse_strafe_limiter_key_s")], movement::mouse_strafe_limiter_key_s);
		write_value(json[xs("movement")][xs("mouse_strafe_limiter_value")], movement::mouse_strafe_limiter_value);
		write_value(json[xs("movement")][xs("edge_jump")], movement::edge_jump);
		write_value(json[xs("movement")][xs("edge_jump_on_ladder")], movement::edge_jump_on_ladder);
		write_value(json[xs("movement")][xs("ladder_bug")], movement::ladder_bug);
		write_value(json[xs("movement")][xs("ladder_bug_detection_printf")], movement::ladder_bug_detection_printf);
		write_value(json[xs("movement")][xs("ladder_bug_key")], movement::ladder_bug_key);
		write_value(json[xs("movement")][xs("ladder_bug_key_s")], movement::ladder_bug_key_s);
		write_value(json[xs("movement")][xs("edge_jump_key")], movement::edge_jump_key);
		write_value(json[xs("movement")][xs("long_jump_on_edge")], movement::long_jump_on_edge);
		write_value(json[xs("movement")][xs("mini_jump")], movement::mini_jump);
		write_value(json[xs("movement")][xs("mini_jump_key")], movement::mini_jump_key);
		write_value(json[xs("movement")][xs("jump_bug")], movement::jump_bug);
		write_value(json[xs("movement")][xs("jump_bug_key")], movement::jump_bug_key);
		write_value(json[xs("movement")][xs("crouch_bug")], movement::crouch_bug);
		write_value(json[xs("movement")][xs("crouch_bug_key")], movement::crouch_bug_key);
		write_value(json[xs("movement")][xs("crouch_bug_key_s")], movement::crouch_bug_key_s);
		write_value(json[xs("movement")][xs("edge_bug_priority")], movement::edge_bug_priority);
		write_value(json[xs("movement")][xs("edge_bug")], movement::edge_bug);
		write_value(json[xs("movement")][xs("visualize_edge_bug")], movement::visualize_edge_bug);
		write_value(json[xs("movement")][xs("edge_bug_advanced_search")], movement::edge_bug_advanced_search);
		write_value(json[xs("movement")][xs("auto_duck")], movement::auto_duck);
		write_value(json[xs("movement")][xs("auto_duck_key")], movement::auto_duck_key);
		write_value(json[xs("movement")][xs("edge_bug_key")], movement::edge_bug_key);
		write_value(json[xs("movement")][xs("edge_bug_ticks")], movement::edge_bug_ticks);
		write_value(json[xs("movement")][xs("edge_bug_rape")], movement::edge_bug_rape);
		write_value(json[xs("movement")][xs("edge_bug_strafe")], movement::edge_bug_strafe);
		write_value(json[xs("movement")][xs("delay_hop")], movement::delay_hop);
		write_value(json[xs("movement")][xs("delay_hop_key")], movement::delay_hop_key);
		write_value(json[xs("movement")][xs("stamina_hop_ticks")], movement::dh_tick);
		write_value(json[xs("movement")][xs("fastduck")], movement::fastduck);
		write_value(json[xs("movement")][xs("edge_bug_lock_amount")], movement::edge_bug_lock_amount);
		write_value(json[xs("movement")][xs("edge_bug_detection_printf")], movement::edge_bug_detection_printf);
		write_value(json[xs("movement")][xs("jump_bug_detection_printf")], movement::jump_bug_detection_printf);
		write_value(json[xs("movement")][xs("long_jump_detection_printf")], movement::long_jump_detection_printf);
		write_value(json[xs("movement")][xs("mini_jump_detection_printf")], movement::mini_jump_detection_printf);
		write_value(json[xs("movement")][xs("edge_bug_detection_sound")], movement::edge_bug_detection_sound);
		write_value(json[xs("movement")][xs("edge_bug_health_boost_effect")], movement::edge_bug_health_boost_effect);
		write_value(json[xs("movement")][xs("velocity_indicator")], movement::velocity_indicator);
		write_value(json[xs("movement")][xs("velocity_indicator_position")], movement::velocity_indicator_position);
		write_value(json[xs("movement")][xs("velocity_indicator_show_pre")], movement::velocity_indicator_show_pre);
		write_value(json[xs("movement")][xs("velocity_indicator_disable_ong_show_pre")], movement::velocity_indicator_disable_ong_show_pre);
		write_value(json[xs("movement")][xs("velocity_indicator_custom_color")], movement::velocity_indicator_custom_color);
		write_value(json[xs("movement")][xs("velocity_indicator_negative_clr[0]")], movement::velocity_indicator_negative_clr[0]);
		write_value(json[xs("movement")][xs("velocity_indicator_negative_clr[1]")], movement::velocity_indicator_negative_clr[1]);
		write_value(json[xs("movement")][xs("velocity_indicator_negative_clr[2]")], movement::velocity_indicator_negative_clr[2]);
		write_value(json[xs("movement")][xs("velocity_indicator_neutral_clr[0]")], movement::velocity_indicator_neutral_clr[0]);
		write_value(json[xs("movement")][xs("velocity_indicator_neutral_clr[1]")], movement::velocity_indicator_neutral_clr[1]);
		write_value(json[xs("movement")][xs("velocity_indicator_neutral_clr[2]")], movement::velocity_indicator_neutral_clr[2]);
		write_value(json[xs("movement")][xs("velocity_indicator_positive_clr[0]")], movement::velocity_indicator_positive_clr[0]);
		write_value(json[xs("movement")][xs("velocity_indicator_positive_clr[1]")], movement::velocity_indicator_positive_clr[1]);
		write_value(json[xs("movement")][xs("velocity_indicator_positive_clr[2]")], movement::velocity_indicator_positive_clr[2]);
		write_value(json[xs("movement")][xs("velocity_indicator_custom_clr[0]")], movement::velocity_indicator_custom_clr[0]);
		write_value(json[xs("movement")][xs("velocity_indicator_custom_clr[1]")], movement::velocity_indicator_custom_clr[1]);
		write_value(json[xs("movement")][xs("velocity_indicator_custom_clr[2]")], movement::velocity_indicator_custom_clr[2]);
		write_value(json[xs("movement")][xs("velocity_indicator_custom_clr[3]")], movement::velocity_indicator_custom_clr[3]);
		write_value(json[xs("movement")][xs("velocity_indicator_custom_clr2[0]")], movement::velocity_indicator_custom_clr2[0]);
		write_value(json[xs("movement")][xs("velocity_indicator_custom_clr2[1]")], movement::velocity_indicator_custom_clr2[1]);
		write_value(json[xs("movement")][xs("velocity_indicator_custom_clr2[2]")], movement::velocity_indicator_custom_clr2[2]);
		write_value(json[xs("movement")][xs("velocity_indicator_fade_clr3[0]")], movement::velocity_indicator_fade_clr3[0]);
		write_value(json[xs("movement")][xs("velocity_indicator_fade_clr3[1]")], movement::velocity_indicator_fade_clr3[1]);
		write_value(json[xs("movement")][xs("velocity_indicator_fade_clr3[2]")], movement::velocity_indicator_fade_clr3[2]);
		write_value(json[xs("movement")][xs("velocity_indicator_fade_clr3[3]")], movement::velocity_indicator_fade_clr3[3]);
		write_value(json[xs("movement")][xs("indicators_show[0]")], movement::indicators_show[0]);
		write_value(json[xs("movement")][xs("indicators_show[1]")], movement::indicators_show[1]);
		write_value(json[xs("movement")][xs("indicators_show[2]")], movement::indicators_show[2]);
		write_value(json[xs("movement")][xs("indicators_show[3]")], movement::indicators_show[3]);
		write_value(json[xs("movement")][xs("indicators_show[4]")], movement::indicators_show[4]);
		write_value(json[xs("movement")][xs("indicators_show[5]")], movement::indicators_show[5]);
		write_value(json[xs("movement")][xs("indicators_show[6]")], movement::indicators_show[6]);
		write_value(json[xs("movement")][xs("indicators_show[7]")], movement::indicators_show[7]);
		write_value(json[xs("movement")][xs("detection_clr_for[0]")], movement::detection_clr_for[0]);
		write_value(json[xs("movement")][xs("detection_clr_for[1]")], movement::detection_clr_for[1]);
		write_value(json[xs("movement")][xs("detection_clr_for[2]")], movement::detection_clr_for[2]);
		write_value(json[xs("movement")][xs("detection_clr_for[3]")], movement::detection_clr_for[3]);
		write_value(json[xs("movement")][xs("detection_clr_for[4]")], movement::detection_clr_for[4]);
		write_value(json[xs("movement")][xs("detection_clr_for[5]")], movement::detection_clr_for[5]);
		write_value(json[xs("movement")][xs("detection_clr_for[6]")], movement::detection_clr_for[6]);
		write_value(json[xs("movement")][xs("detection_clr_for[7]")], movement::detection_clr_for[7]);
		write_value(json[xs("movement")][xs("allow_detection_clr")], movement::allow_detection_clr);
		write_value(json[xs("movement")][xs("detection_saved_tick")], movement::detection_saved_tick);
		write_value(json[xs("movement")][xs("indicators_allow_animation")], movement::indicators_allow_animation);
		write_value(json[xs("movement")][xs("stamina_indicator")], movement::stamina_indicator);
		write_value(json[xs("movement")][xs("stamina_indicator_fade")], movement::stamina_indicator_fade);
		write_value(json[xs("movement")][xs("stamina_indicator_show_pre")], movement::stamina_indicator_show_pre);
		write_value(json[xs("movement")][xs("stamina_indicator_disable_ong_show_pre")], movement::stamina_indicator_disable_ong_show_pre);
		write_value(json[xs("movement")][xs("stamina_indicator_position")], movement::stamina_indicator_position);
		write_value(json[xs("movement")][xs("stamina_indicator_clr[0]")], movement::stamina_indicator_clr[0]);
		write_value(json[xs("movement")][xs("stamina_indicator_clr[1]")], movement::stamina_indicator_clr[1]);
		write_value(json[xs("movement")][xs("stamina_indicator_clr[2]")], movement::stamina_indicator_clr[2]);
		write_value(json[xs("movement")][xs("stamina_fade_clr[0]")], movement::stamina_fade_clr[0]);
		write_value(json[xs("movement")][xs("stamina_fade_clr[1]")], movement::stamina_fade_clr[1]);
		write_value(json[xs("movement")][xs("stamina_fade_clr[2]")], movement::stamina_fade_clr[2]);
		write_value(json[xs("movement")][xs("stamina_fade_clr[3]")], movement::stamina_fade_clr[3]);
		write_value(json[xs("movement")][xs("indicator_detect_clr[0]")], movement::indicator_detect_clr[0]);
		write_value(json[xs("movement")][xs("indicator_detect_clr[1]")], movement::indicator_detect_clr[1]);
		write_value(json[xs("movement")][xs("indicator_detect_clr[2]")], movement::indicator_detect_clr[2]);
		write_value(json[xs("movement")][xs("velocity_graph")], movement::velocity_graph);
		write_value(json[xs("movement")][xs("velocity_graph_color[0]")], movement::velocity_graph_color[0]);
		write_value(json[xs("movement")][xs("velocity_graph_color[1]")], movement::velocity_graph_color[1]);
		write_value(json[xs("movement")][xs("velocity_graph_color[2]")], movement::velocity_graph_color[2]);
		write_value(json[xs("movement")][xs("velocity_linewidth")], movement::velocity_linewidth);
		write_value(json[xs("movement")][xs("velocity_height")], movement::velocity_height);
		write_value(json[xs("movement")][xs("velocity_size")], movement::velocity_size);
		write_value(json[xs("movement")][xs("graph_xscreenpos")], movement::graph_xscreenpos);
		write_value(json[xs("movement")][xs("velocity_graph_show_landed_speed")], movement::velocity_graph_show_landed_speed);
		write_value(json[xs("movement")][xs("velocity_graph_show_edge_bug")], movement::velocity_graph_show_edge_bug);
		write_value(json[xs("movement")][xs("velocity_graph_show_jump_bug")], movement::velocity_graph_show_jump_bug);
		write_value(json[xs("movement")][xs("stamina_graph")], movement::stamina_graph);
		write_value(json[xs("movement")][xs("stamina_graph_color[0]")], movement::stamina_graph_color[0]);
		write_value(json[xs("movement")][xs("stamina_graph_color[1]")], movement::stamina_graph_color[1]);
		write_value(json[xs("movement")][xs("stamina_graph_color[2]")], movement::stamina_graph_color[2]);
		write_value(json[xs("movement")][xs("stamina_graph_offset")], movement::stamina_graph_offset);
		write_value(json[xs("movement")][xs("stamina_graph_height")], movement::stamina_graph_height);
		write_value(json[xs("movement")][xs("stamina_graph_offset_x")], movement::stamina_graph_offset_x);
		write_value(json[xs("movement")][xs("graph_fade")], movement::graph_fade);
		write_value(json[xs("movement")][xs("key_strokes")], movement::key_strokes);
		write_value(json[xs("movement")][xs("key_strokes_position")], movement::key_strokes_position);
		write_value(json[xs("misc")][xs("watermark")], misc::watermark);
		write_value(json[xs("misc")][xs("unlock_inventory")], misc::unlock_inventory);
		write_value(json[xs("misc")][xs("show_spotify_currently_playing")], misc::show_spotify_currently_playing);
		write_value(json[xs("misc")][xs("movement_rec")], misc::movement_rec);
		write_value(json[xs("misc")][xs("movement_rec_smoothing")], misc::movement_rec_smoothing);
		write_value(json[xs("misc")][xs("movement_rec_lockva")], misc::movement_rec_lockva);
		write_value(json[xs("misc")][xs("movement_rec_ringsize")], misc::movement_rec_ringsize);
		write_value(json[xs("misc")][xs("movement_rec_keystartrecord")], misc::movement_rec_keystartrecord);
		write_value(json[xs("misc")][xs("movement_rec_keystoprecord")], misc::movement_rec_keystoprecord);
		write_value(json[xs("misc")][xs("movement_rec_keystartplayback")], misc::movement_rec_keystartplayback);
		write_value(json[xs("misc")][xs("movement_rec_keystopplayback")], misc::movement_rec_keystopplayback);
		write_value(json[xs("misc")][xs("movement_rec_keyclearrecord")], misc::movement_rec_keyclearrecord);
		write_value(json[xs("misc")][xs("custom_console")], misc::custom_console);
		write_value(json[xs("misc")][xs("custom_console_clr[0]")], misc::custom_console_clr[0]);
		write_value(json[xs("misc")][xs("custom_console_clr[1]")], misc::custom_console_clr[1]);
		write_value(json[xs("misc")][xs("custom_console_clr[2]")], misc::custom_console_clr[2]);
		write_value(json[xs("misc")][xs("custom_console_clr[3]")], misc::custom_console_clr[3]);
		write_value(json[xs("misc")][xs("spectators_list")], misc::spectators_list);
		write_value(json[xs("misc")][xs("spectatorlist_type")], misc::spectatorlist_type);
		write_value(json[xs("misc")][xs("spectatorlist_show_target")], misc::spectatorlist_show_target);
		write_value(json[xs("misc")][xs("spectators_list_color_1[0]")], misc::spectators_list_color_1[0]);
		write_value(json[xs("misc")][xs("spectators_list_color_1[1]")], misc::spectators_list_color_1[1]);
		write_value(json[xs("misc")][xs("spectators_list_color_1[2]")], misc::spectators_list_color_1[2]);
		write_value(json[xs("misc")][xs("spectators_list_color_2[0]")], misc::spectators_list_color_2[0]);
		write_value(json[xs("misc")][xs("spectators_list_color_2[1]")], misc::spectators_list_color_2[1]);
		write_value(json[xs("misc")][xs("spectators_list_color_2[2]")], misc::spectators_list_color_2[2]);
		write_value(json[xs("misc")][xs("spectators_list_clr[0]")], misc::spectators_list_clr[0]);
		write_value(json[xs("misc")][xs("spectators_list_clr[1]")], misc::spectators_list_clr[1]);
		write_value(json[xs("misc")][xs("spectators_list_clr[2]")], misc::spectators_list_clr[2]);
		write_value(json[xs("misc")][xs("spectators_list_clr_2[0]")], misc::spectators_list_clr_2[0]);
		write_value(json[xs("misc")][xs("spectators_list_clr_2[1]")], misc::spectators_list_clr_2[1]);
		write_value(json[xs("misc")][xs("spectators_list_clr_2[2]")], misc::spectators_list_clr_2[2]);
		write_value(json[xs("misc")][xs("field_of_view")], misc::field_of_view);
		write_value(json[xs("misc")][xs("enable_fov")], misc::enable_fov);
		write_value(json[xs("misc")][xs("view_model")], misc::view_model);
		write_value(json[xs("misc")][xs("view_model_x")], misc::view_model_x);
		write_value(json[xs("misc")][xs("view_model_y")], misc::view_model_y);
		write_value(json[xs("misc")][xs("view_model_z")], misc::view_model_z);
		write_value(json[xs("misc")][xs("aspect_ratio")], misc::aspect_ratio);
		write_value(json[xs("misc")][xs("thirdperson")], misc::thirdperson);
		write_value(json[xs("misc")][xs("thirdperson_key")], misc::thirdperson_key);
		write_value(json[xs("misc")][xs("thirdperson_distance")], misc::thirdperson_distance);
		write_value(json[xs("misc")][xs("aspect_ratio_amount")], misc::aspect_ratio_amount);
		write_value(json[xs("misc")][xs("practice")], misc::practice);
		write_value(json[xs("misc")][xs("savepos")], misc::savepos);
		write_value(json[xs("misc")][xs("loadpos")], misc::loadpos);
		write_value(json[xs("misc")][xs("nextkey")], misc::nextkey);
		write_value(json[xs("misc")][xs("prevkey")], misc::prevkey);
		write_value(json[xs("misc")][xs("undokey")], misc::undokey);
		write_value(json[xs("misc")][xs("discord_rpc")], misc::discord_rpc);
		write_value(json[xs("misc")][xs("mouse_fix")], misc::mouse_fix);
		write_value(json[xs("misc")][xs("jumpstats")], misc::jumpstats);
		write_value(json[xs("misc")][xs("jumpstats_show_clr_fail")], misc::jumpstats_show_clr_fail);
		write_value(json[xs("misc")][xs("jumpstats_show_fail")], misc::jumpstats_show_fail);
		write_value(json[xs("misc")][xs("misc_reveal_ranks")], misc::misc_reveal_ranks);
		write_value(json[xs("misc")][xs("misc_hitmarker_sound_type")], misc::misc_hitmarker_sound_type);
		write_value(json[xs("misc")][xs("freecam")], misc::freecam);
		write_value(json[xs("misc")][xs("freecam_key")], misc::freecam_key);
		write_value(json[xs("visuals")][xs("skeletonesp_clr[0]")], visuals::skeletonesp_clr[0]);
		write_value(json[xs("visuals")][xs("skeletonesp_clr[1]")], visuals::skeletonesp_clr[1]);
		write_value(json[xs("visuals")][xs("skeletonesp_clr[2]")], visuals::skeletonesp_clr[2]);
		write_value(json[xs("visuals")][xs("skeletonbt_clr[0]")], visuals::skeletonbt_clr[0]);
		write_value(json[xs("visuals")][xs("skeletonbt_clr[1]")], visuals::skeletonbt_clr[1]);
		write_value(json[xs("visuals")][xs("skeletonbt_clr[2]")], visuals::skeletonbt_clr[2]);
		write_value(json[xs("visuals")][xs("selected_tick_clr[0]")], visuals::selected_tick_clr[0]);
		write_value(json[xs("visuals")][xs("selected_tick_clr[1]")], visuals::selected_tick_clr[1]);
		write_value(json[xs("visuals")][xs("selected_tick_clr[2]")], visuals::selected_tick_clr[2]);
		write_value(json[xs("visuals")][xs("glow_visible_clr[0]")], visuals::glow_visible_clr[0]);
		write_value(json[xs("visuals")][xs("glow_visible_clr[1]")], visuals::glow_visible_clr[1]);
		write_value(json[xs("visuals")][xs("glow_visible_clr[2]")], visuals::glow_visible_clr[2]);
		write_value(json[xs("visuals")][xs("glow_visible_clr[3]")], visuals::glow_visible_clr[3]);
		write_value(json[xs("visuals")][xs("glow_invisible_clr[0]")], visuals::glow_invisible_clr[0]);
		write_value(json[xs("visuals")][xs("glow_invisible_clr[1]")], visuals::glow_invisible_clr[1]);
		write_value(json[xs("visuals")][xs("glow_invisible_clr[2]")], visuals::glow_invisible_clr[2]);
		write_value(json[xs("visuals")][xs("glow_invisible_clr[3]")], visuals::glow_invisible_clr[3]);
		write_value(json[xs("visuals")][xs("glow_weapon_clr[0]")], visuals::glow_weapon_clr[0]);
		write_value(json[xs("visuals")][xs("glow_weapon_clr[1]")], visuals::glow_weapon_clr[1]);
		write_value(json[xs("visuals")][xs("glow_weapon_clr[2]")], visuals::glow_weapon_clr[2]);
		write_value(json[xs("visuals")][xs("glow_weapon_clr[3]")], visuals::glow_weapon_clr[3]);
		write_value(json[xs("visuals")][xs("enable_visuals")], visuals::enable_visuals);
		write_value(json[xs("visuals")][xs("fade_animation")], visuals::fade_animation);
		write_value(json[xs("visuals")][xs("playerbox")], visuals::playerbox);
		write_value(json[xs("visuals")][xs("playerweapon")], visuals::playerweapon);
		write_value(json[xs("visuals")][xs("player_weapon_type[0]")], visuals::player_weapon_type[0]);
		write_value(json[xs("visuals")][xs("player_weapon_type[1]")], visuals::player_weapon_type[1]);
		write_value(json[xs("visuals")][xs("playerbox_color[0]")], visuals::playerbox_color[0]);
		write_value(json[xs("visuals")][xs("playerbox_color[1]")], visuals::playerbox_color[1]);
		write_value(json[xs("visuals")][xs("playerbox_color[2]")], visuals::playerbox_color[2]);
		write_value(json[xs("visuals")][xs("playername")], visuals::playername);
		write_value(json[xs("visuals")][xs("playername_color[0]")], visuals::playername_color[0]);
		write_value(json[xs("visuals")][xs("playername_color[1]")], visuals::playername_color[1]);
		write_value(json[xs("visuals")][xs("playername_color[2]")], visuals::playername_color[2]);
		write_value(json[xs("visuals")][xs("health_color[0]")], visuals::health_color[0]);
		write_value(json[xs("visuals")][xs("health_color[1]")], visuals::health_color[1]);
		write_value(json[xs("visuals")][xs("health_color[2]")], visuals::health_color[2]);
		write_value(json[xs("visuals")][xs("skeleton")], visuals::skeleton);
		write_value(json[xs("visuals")][xs("skeleton_last")], visuals::skeleton_last);
		write_value(json[xs("visuals")][xs("skeleton_last_clr[0]")], visuals::skeleton_last_clr[0]);
		write_value(json[xs("visuals")][xs("skeleton_last_clr[1]")], visuals::skeleton_last_clr[1]);
		write_value(json[xs("visuals")][xs("skeleton_last_clr[2]")], visuals::skeleton_last_clr[2]);
		write_value(json[xs("visuals")][xs("healthesp")], visuals::healthesp);
		write_value(json[xs("visuals")][xs("override_bar")], visuals::override_bar);
		write_value(json[xs("visuals")][xs("gradient_bar")], visuals::gradient_bar);
		write_value(json[xs("visuals")][xs("health_bar_gradient[0]")], visuals::health_bar_gradient[0]);
		write_value(json[xs("visuals")][xs("health_bar_gradient[1]")], visuals::health_bar_gradient[1]);
		write_value(json[xs("visuals")][xs("health_bar_gradient[2]")], visuals::health_bar_gradient[2]);
		write_value(json[xs("visuals")][xs("healthesp_s")], visuals::healthesp_s);
		write_value(json[xs("visuals")][xs("health_bar[0]")], visuals::health_bar[0]);
		write_value(json[xs("visuals")][xs("health_bar[1]")], visuals::health_bar[1]);
		write_value(json[xs("visuals")][xs("health_bar[2]")], visuals::health_bar[2]);
		write_value(json[xs("visuals")][xs("oof_arrows")], visuals::oof_arrows);
		write_value(json[xs("visuals")][xs("oof_arrows_clr[0]")], visuals::oof_arrows_clr[0]);
		write_value(json[xs("visuals")][xs("oof_arrows_clr[1]")], visuals::oof_arrows_clr[1]);
		write_value(json[xs("visuals")][xs("oof_arrows_clr[2]")], visuals::oof_arrows_clr[2]);
		write_value(json[xs("visuals")][xs("oof_arrows_clr[3]")], visuals::oof_arrows_clr[3]);
		write_value(json[xs("visuals")][xs("oof_arrows_clr2[0]")], visuals::oof_arrows_clr2[0]);
		write_value(json[xs("visuals")][xs("oof_arrows_clr2[1]")], visuals::oof_arrows_clr2[1]);
		write_value(json[xs("visuals")][xs("oof_arrows_clr2[2]")], visuals::oof_arrows_clr2[2]);
		write_value(json[xs("visuals")][xs("oof_arrows_clr2[3]")], visuals::oof_arrows_clr2[3]);
		write_value(json[xs("visuals")][xs("oof_arrows_dist")], visuals::oof_arrows_dist);
		write_value(json[xs("visuals")][xs("oof_arrows_size")], visuals::oof_arrows_size);
		write_value(json[xs("visuals")][xs("skeletonesp")], visuals::skeletonesp);
		write_value(json[xs("visuals")][xs("radar")], visuals::radar);
		write_value(json[xs("visuals")][xs("gravity_ragdoll")], visuals::gravity_ragdoll);
		write_value(json[xs("visuals")][xs("backtrack_chams")], chams::backtrack_chams);
		write_value(json[xs("visuals")][xs("backtrack_chams_draw_all_ticks")], chams::backtrack_chams_draw_all_ticks);
		write_value(json[xs("visuals")][xs("backtrack_chams_gradient")], chams::backtrack_chams_gradient);
		write_value(json[xs("visuals")][xs("backtrack_chams_clr1[0]")], chams::backtrack_chams_clr1[0]);
		write_value(json[xs("visuals")][xs("backtrack_chams_clr1[1]")], chams::backtrack_chams_clr1[1]);
		write_value(json[xs("visuals")][xs("backtrack_chams_clr1[2]")], chams::backtrack_chams_clr1[2]);
		write_value(json[xs("visuals")][xs("backtrack_chams_clr1[3]")], chams::backtrack_chams_clr1[3]);
		write_value(json[xs("visuals")][xs("backtrack_chams_clr2[0]")], chams::backtrack_chams_clr2[0]);
		write_value(json[xs("visuals")][xs("backtrack_chams_clr2[1]")], chams::backtrack_chams_clr2[1]);
		write_value(json[xs("visuals")][xs("backtrack_chams_clr2[2]")], chams::backtrack_chams_clr2[2]);
		write_value(json[xs("visuals")][xs("backtrack_chams_clr2[3]")], chams::backtrack_chams_clr2[3]);
		write_value(json[xs("visuals")][xs("sleeve_chams_clr[0]")], chams::sleeve_chams_clr[0]);
		write_value(json[xs("visuals")][xs("sleeve_chams_clr[1]")], chams::sleeve_chams_clr[1]);
		write_value(json[xs("visuals")][xs("sleeve_chams_clr[2]")], chams::sleeve_chams_clr[2]);
		write_value(json[xs("visuals")][xs("sleeve_chams_clr[3]")], chams::sleeve_chams_clr[3]);
		write_value(json[xs("visuals")][xs("arms_chams_clr[0]")], chams::arms_chams_clr[0]);
		write_value(json[xs("visuals")][xs("arms_chams_clr[1]")], chams::arms_chams_clr[1]);
		write_value(json[xs("visuals")][xs("arms_chams_clr[2]")], chams::arms_chams_clr[2]);
		write_value(json[xs("visuals")][xs("arms_chams_clr[3]")], chams::arms_chams_clr[3]);
		write_value(json[xs("visuals")][xs("sleeve_chams_clr_ov[0]")], chams::sleeve_chams_clr_ov[0]);
		write_value(json[xs("visuals")][xs("sleeve_chams_clr_ov[1]")], chams::sleeve_chams_clr_ov[1]);
		write_value(json[xs("visuals")][xs("sleeve_chams_clr_ov[2]")], chams::sleeve_chams_clr_ov[2]);
		write_value(json[xs("visuals")][xs("sleeve_chams_clr_ov[3]")], chams::sleeve_chams_clr_ov[3]);
		write_value(json[xs("visuals")][xs("arms_chams_clr_ov[0]")], chams::arms_chams_clr_ov[0]);
		write_value(json[xs("visuals")][xs("arms_chams_clr_ov[1]")], chams::arms_chams_clr_ov[1]);
		write_value(json[xs("visuals")][xs("arms_chams_clr_ov[2]")], chams::arms_chams_clr_ov[2]);
		write_value(json[xs("visuals")][xs("arms_chams_clr_ov[3]")], chams::arms_chams_clr_ov[3]);
		write_value(json[xs("visuals")][xs("wpn_chams_clr[0]")], chams::wpn_chams_clr[0]);
		write_value(json[xs("visuals")][xs("wpn_chams_clr[1]")], chams::wpn_chams_clr[1]);
		write_value(json[xs("visuals")][xs("wpn_chams_clr[2]")], chams::wpn_chams_clr[2]);
		write_value(json[xs("visuals")][xs("wpn_chams_clr[3]")], chams::wpn_chams_clr[3]);
		write_value(json[xs("visuals")][xs("wpn_chams_clr_ov[0]")], chams::wpn_chams_clr_ov[0]);
		write_value(json[xs("visuals")][xs("wpn_chams_clr_ov[1]")], chams::wpn_chams_clr_ov[1]);
		write_value(json[xs("visuals")][xs("wpn_chams_clr_ov[2]")], chams::wpn_chams_clr_ov[2]);
		write_value(json[xs("visuals")][xs("wpn_chams_clr_ov[3]")], chams::wpn_chams_clr_ov[3]);
		write_value(json[xs("visuals")][xs("visible_wireframe")], chams::visible_wireframe);
		write_value(json[xs("visuals")][xs("visible_chams_ov")], chams::visible_chams_ov);
		write_value(json[xs("visuals")][xs("visible_wireframe_ov")], chams::visible_wireframe_ov);
		write_value(json[xs("visuals")][xs("invisible_wireframe")], chams::invisible_wireframe);
		write_value(json[xs("visuals")][xs("sleeve_chams")], chams::sleeve_chams);
		write_value(json[xs("visuals")][xs("sleeve_wireframe")], chams::sleeve_wireframe);
		write_value(json[xs("visuals")][xs("arms_chams")], chams::arms_chams);
		write_value(json[xs("visuals")][xs("arms_wireframe")], chams::arms_wireframe);
		write_value(json[xs("visuals")][xs("sleeve_chams_ov")], chams::sleeve_chams_ov);
		write_value(json[xs("visuals")][xs("sleeve_wireframe_ov")], chams::sleeve_wireframe_ov);
		write_value(json[xs("visuals")][xs("arms_chams_ov")], chams::arms_chams_ov);
		write_value(json[xs("visuals")][xs("wpn_chams")], chams::wpn_chams);
		write_value(json[xs("visuals")][xs("wpn_wireframe")], chams::wpn_wireframe);
		write_value(json[xs("visuals")][xs("wpn_chams_ov")], chams::wpn_chams_ov);
		write_value(json[xs("visuals")][xs("wpn_wireframe_ov")], chams::wpn_wireframe_ov);
		write_value(json[xs("visuals")][xs("cham_type_overlay")], chams::cham_type_overlay);
		write_value(json[xs("visuals")][xs("cham_type_sleeve")], chams::cham_type_sleeve);
		write_value(json[xs("visuals")][xs("cham_type_sleeve_ov")], chams::cham_type_sleeve_ov);
		write_value(json[xs("visuals")][xs("cham_type_wpn")], chams::cham_type_wpn);
		write_value(json[xs("visuals")][xs("cham_type_wpn_ov")], chams::cham_type_wpn_ov);
		write_value(json[xs("visuals")][xs("cham_type_arms")], chams::cham_type_arms);
		write_value(json[xs("visuals")][xs("cham_type_arms_ov")], chams::cham_type_arms_ov);
		write_value(json[xs("visuals")][xs("glow")], visuals::glow);
		write_value(json[xs("visuals")][xs("glow_weapon")], visuals::glow_weapon);
		write_value(json[xs("triggerbot")][xs("enabled")], triggerbot::enabled);
		write_value(json[xs("triggerbot")][xs("triggerbot_key")], triggerbot::triggerbot_key);
		write_value(json[xs("triggerbot")][xs("triggerbot_key_s")], triggerbot::triggerbot_key_s);
		write_value(json[xs("aimbot")][xs("backtrack")], backtrack::backtrack);
		write_value(json[xs("aimbot")][xs("time")], backtrack::time);
		write_value(json[xs("aimbot")][xs("fake")], backtrack::fake);
		write_value(json[xs("aimbot")][xs("fake_latency")], backtrack::fake_latency);\
		write_value(json[xs("aimbot")][xs("selected_tick")], backtrack::selected_tick);
		write_value(json[xs("movement")][xs("auto_align")], movement::auto_align);
		write_value(json[xs("aimbot")][xs("aimbot")], aimbot::aim_at_bt);
		write_value(json[xs("aimbot")][xs("aimbot")], aimbot::aimbot);
		write_value(json[xs("aimbot")][xs("aimbot_key")], aimbot::aimbot_key);
		write_value(json[xs("aimbot")][xs("pistol_hitbox")], aimbot::pistol_hitbox);
		write_value(json[xs("aimbot")][xs("pistol_aimbot_fov")], aimbot::pistol_aimbot_fov);
		write_value(json[xs("aimbot")][xs("pistol_autowall")], aimbot::pistol_autowall);
		write_value(json[xs("aimbot")][xs("pistol_autowall_dmg")], aimbot::pistol_autowall_dmg);
		write_value(json[xs("aimbot")][xs("heavy_pistol_hitbox")], aimbot::heavy_pistol_hitbox);
		write_value(json[xs("aimbot")][xs("heavy_pistol_aimbot_fov")], aimbot::heavy_pistol_aimbot_fov);
		write_value(json[xs("aimbot")][xs("heavy_pistol_autowall")], aimbot::heavy_pistol_autowall);
		write_value(json[xs("aimbot")][xs("heavy_pistol_autowall_dmg")], aimbot::heavy_pistol_autowall_dmg);
		write_value(json[xs("aimbot")][xs("shotgun_hitbox")], aimbot::shotgun_hitbox);
		write_value(json[xs("aimbot")][xs("shotgun_aimbot_fov")], aimbot::shotgun_aimbot_fov);
		write_value(json[xs("aimbot")][xs("shotgun_autowall")], aimbot::shotgun_autowall);
		write_value(json[xs("aimbot")][xs("heavy_hitbox")], aimbot::heavy_hitbox);
		write_value(json[xs("aimbot")][xs("heavy_aimbot_fov")], aimbot::heavy_aimbot_fov);
		write_value(json[xs("aimbot")][xs("heavy_autowall")], aimbot::heavy_autowall);
		write_value(json[xs("aimbot")][xs("heavy_autowall_dmg")], aimbot::heavy_autowall_dmg);
		write_value(json[xs("aimbot")][xs("smg_hitbox")], aimbot::smg_hitbox);
		write_value(json[xs("aimbot")][xs("smg_aimbot_fov")], aimbot::smg_aimbot_fov);
		write_value(json[xs("aimbot")][xs("smg_autowall")], aimbot::smg_autowall);
		write_value(json[xs("aimbot")][xs("smg_autowall_dmg")], aimbot::smg_autowall_dmg);
		write_value(json[xs("aimbot")][xs("rifle_hitbox")], aimbot::rifle_hitbox);
		write_value(json[xs("aimbot")][xs("rifle_aimbot_fov")], aimbot::rifle_aimbot_fov);
		write_value(json[xs("aimbot")][xs("rifle_autowall")], aimbot::rifle_autowall);
		write_value(json[xs("aimbot")][xs("rifle_autowall_dmg")], aimbot::rifle_autowall_dmg);
		write_value(json[xs("aimbot")][xs("sniper_hitbox")], aimbot::sniper_hitbox);
		write_value(json[xs("aimbot")][xs("sniper_aimbot_fov")], aimbot::sniper_aimbot_fov);
		write_value(json[xs("aimbot")][xs("sniper_autowall")], aimbot::sniper_autowall);
		write_value(json[xs("aimbot")][xs("sniper_autowall_dmg")], aimbot::sniper_autowall_dmg);
		write_value(json[xs("aimbot")][xs("autosniper_hitbox")], aimbot::autosniper_hitbox);
		write_value(json[xs("aimbot")][xs("autosniper_aimbot_fov")], aimbot::autosniper_aimbot_fov);
		write_value(json[xs("aimbot")][xs("autosniper_autowall")], aimbot::autosniper_autowall);
		write_value(json[xs("aimbot")][xs("autosniper_autowall_dmg")], aimbot::autosniper_autowall_dmg);
		write_value(json[xs("aimbot")][xs("aimbot_silent")], aimbot::aimbot_silent);
		write_value(json[xs("aimbot")][xs("non_sticky_aimbot")], aimbot::non_sticky_aimbot);
		write_value(json[xs("visuals")][xs("dropped_weapon_icon")], visuals::dropped_weapon_icon);
		write_value(json[xs("visuals")][xs("dropped_weapon_name")], visuals::dropped_weapon_name);
		write_value(json[xs("visuals")][xs("dropped_weapon_distance")], visuals::dropped_weapon_distance);
		write_value(json[xs("visuals")][xs("dropped_weapon_icon_clr[0]")], visuals::dropped_weapon_icon_clr[0]);
		write_value(json[xs("visuals")][xs("dropped_weapon_box_clr[1]")], visuals::dropped_weapon_icon_clr[1]);
		write_value(json[xs("visuals")][xs("dropped_weapon_icon_clr[2]")], visuals::dropped_weapon_icon_clr[2]);
		write_value(json[xs("visuals")][xs("dropped_weapon_icon_clr[3]")], visuals::dropped_weapon_icon_clr[3]);
		write_value(json[xs("visuals")][xs("dropped_weapon_name_clr[0]")], visuals::dropped_weapon_name_clr[0]);
		write_value(json[xs("visuals")][xs("dropped_weapon_name_clr[1]")], visuals::dropped_weapon_name_clr[1]);
		write_value(json[xs("visuals")][xs("dropped_weapon_name_clr[2]")], visuals::dropped_weapon_name_clr[2]);
		write_value(json[xs("visuals")][xs("dropped_weapon_name_clr[3]")], visuals::dropped_weapon_name_clr[3]);
		write_value(json[xs("visuals")][xs("fog_color[0]")], visuals::fog_color[0]);
		write_value(json[xs("visuals")][xs("fog_color[1]")], visuals::fog_color[1]);
		write_value(json[xs("visuals")][xs("fog_color[2]")], visuals::fog_color[2]);
		write_value(json[xs("visuals")][xs("fog_color[3]")], visuals::fog_color[3]);
		write_value(json[xs("visuals")][xs("fog")], visuals::fog);
		write_value(json[xs("visuals")][xs("fog_distance")], visuals::fog_distance);
		write_value(json[xs("visuals")][xs("fog_density")], visuals::fog_density);
		write_value(json[xs("misc")][xs("swayscale")], misc::swayscale);
		write_value(json[xs("misc")][xs("swayscale_value")], misc::swayscale_value);
		write_value(json[xs("visuals")][xs("skybox")], visuals::skybox);
		write_value(json[xs("visuals")][xs("visible_chams_clr[0]")], chams::visible_chams_clr[0]);
		write_value(json[xs("visuals")][xs("visible_chams_clr[1]")], chams::visible_chams_clr[1]);
		write_value(json[xs("visuals")][xs("visible_chams_clr[2]")], chams::visible_chams_clr[2]);
		write_value(json[xs("visuals")][xs("visible_chams_clr[3]")], chams::visible_chams_clr[3]);
		write_value(json[xs("visuals")][xs("invisible_chams_clr[0]")], chams::invisible_chams_clr[0]);
		write_value(json[xs("visuals")][xs("invisible_chams_clr[1]")], chams::invisible_chams_clr[1]);
		write_value(json[xs("visuals")][xs("invisible_chams_clr[2]")], chams::invisible_chams_clr[2]);
		write_value(json[xs("visuals")][xs("invisible_chams_clr[3]")], chams::invisible_chams_clr[3]);
		write_value(json[xs("visuals")][xs("invisible_chams")], chams::invisible_chams);
		write_value(json[xs("visuals")][xs("visible_chams")], chams::visible_chams);
		write_value(json[xs("visuals")][xs("cham_type_bt")], chams::cham_type_bt);
		write_value(json[xs("visuals")][xs("cham_type")], chams::cham_type);
		write_value(json[xs("misc")][xs("misc_animated_clantag")], misc::misc_animated_clantag);
		write_value(json[xs("misc")][xs("force_crosshair")], misc::force_crosshair);
		write_value(json[xs("misc")][xs("sniper_crosshair")], misc::sniper_crosshair);
		write_value(json[xs("misc")][xs("misc_clantag_spammer")], misc::misc_clantag_spammer);
		write_value(json[xs("misc")][xs("misc_clantag_speed")], misc::misc_clantag_speed);
		write_value(json[xs("misc")][xs("misc_clantag_type")], misc::misc_clantag_type);
		write_value(json[xs("misc")][xs("misc_hitmarker")], misc::misc_hitmarker);
		write_value(json[xs("misc")][xs("misc_hitmarker_sound")], misc::misc_hitmarker_sound);
		write_value(json[xs("misc")][xs("misc_hitmarker_screen_effect")], misc::misc_hitmarker_screen_effect);
		write_value(json[xs("misc")][xs("misc_kill_msg")], misc::misc_kill_msg);
		write_value(json[xs("visuals")][xs("fullbright")], visuals::fullbright);
		write_value(json[xs("visuals")][xs("apply_zoom")], visuals::apply_zoom);
		write_value(json[xs("visuals")][xs("apply_zoom_key")], visuals::apply_zoom_key);
		write_value(json[xs("visuals")][xs("apply_zoom_key_s")], visuals::apply_zoom_key_s);
		write_value(json[xs("visuals")][xs("player_box_outline[0]")], visuals::player_box_outline[0]);
		write_value(json[xs("visuals")][xs("player_box_outline[1]")], visuals::player_box_outline[1]);
		write_value(json[xs("visuals")][xs("boxtype")], visuals::boxtype);
		write_value(json[xs("visuals")][xs("mbenabled")], visuals::mbenabled);
		write_value(json[xs("visuals")][xs("mbforwardEnabled")], visuals::mbforwardEnabled);
		write_value(json[xs("visuals")][xs("mbfallingMin")], visuals::mbfallingMin);
		write_value(json[xs("visuals")][xs("mbfallingMax")], visuals::mbfallingMax);
		write_value(json[xs("visuals")][xs("mbfallingIntensity")], visuals::mbfallingIntensity);
		write_value(json[xs("visuals")][xs("mbrotationIntensity")], visuals::mbrotationIntensity);
		write_value(json[xs("visuals")][xs("mbstrength")], visuals::mbstrength);
		write_value(json[xs("misc")][xs("nadepred")], misc::nadepred);
		write_value(json[xs("misc")][xs("nadepred_clr[0]")], misc::nadepred_clr[0]);
		write_value(json[xs("misc")][xs("nadepred_clr[1]")], misc::nadepred_clr[1]);
		write_value(json[xs("misc")][xs("nadepred_clr[2]")], misc::nadepred_clr[2]);
		write_value(json[xs("visuals")][xs("flashalpha")], visuals::flashalpha);
		write_value(json[xs("visuals")][xs("change_flashalpha")], visuals::change_flashalpha);
		write_value(json[xs("visuals")][xs("nosmoke")], visuals::nosmoke);
		write_value(json[xs("misc")][xs("autoaccept")], misc::autoaccept);
		write_value(json[xs("visuals")][xs("trails_clr1[0]")], visuals::trails_clr1[0]);
		write_value(json[xs("visuals")][xs("trails_clr1[1]")], visuals::trails_clr1[1]);
		write_value(json[xs("visuals")][xs("trails_clr1[2]")], visuals::trails_clr1[2]);
		write_value(json[xs("visuals")][xs("trails_clr1[3]")], visuals::trails_clr1[3]);
		write_value(json[xs("visuals")][xs("trails_clr2[0]")], visuals::trails_clr2[0]);
		write_value(json[xs("visuals")][xs("trails_clr2[1]")], visuals::trails_clr2[1]);
		write_value(json[xs("visuals")][xs("trails_clr2[2]")], visuals::trails_clr2[2]);
		write_value(json[xs("visuals")][xs("trails_clr2[3]")], visuals::trails_clr2[3]);
		write_value(json[xs("visuals")][xs("world_modulate")], visuals::world_modulate);
		write_value(json[xs("visuals")][xs("world_color[0]")], visuals::world_color[0]);
		write_value(json[xs("visuals")][xs("world_color[1]")], visuals::world_color[1]);
		write_value(json[xs("visuals")][xs("world_color[2]")], visuals::world_color[2]);
		write_value(json[xs("visuals")][xs("world_color[3]")], visuals::world_color[3]);
		write_value(json[xs("visuals")][xs("trails")], visuals::trails);
		write_value(json[xs("movement")][xs("indicators_position")], movement::indicators_position);
		write_value(json[xs("movement")][xs("indicators_gap")], movement::indicators_gap);
		write_value(json[xs("misc")][xs("menu_key")], misc::menu_key);
		write_value(json[xs("misc")][xs("vote_revealer")], misc::vote_revealer);
		write_value(json[xs("misc")][xs("misc_hit_info[0]")], misc::misc_hit_info[0]);
		write_value(json[xs("misc")][xs("misc_hit_info[1]")], misc::misc_hit_info[1]);
		write_value(json[xs("visuals")][xs("visuals_flags[0]")], visuals::visuals_flags[0]);
		write_value(json[xs("visuals")][xs("visuals_flags[1]")], visuals::visuals_flags[1]);
		write_value(json[xs("visuals")][xs("visuals_flags[2]")], visuals::visuals_flags[2]);
		write_value(json[xs("visuals")][xs("visuals_flags[3]")], visuals::visuals_flags[3]);
		write_value(json[xs("visuals")][xs("visuals_flags[4]")], visuals::visuals_flags[4]);
		write_value(json[xs("visuals")][xs("visuals_flags[5]")], visuals::visuals_flags[5]);
		write_value(json[xs("visuals")][xs("removals[0]")], visuals::removals[0]);
		write_value(json[xs("visuals")][xs("removals[1]")], visuals::removals[1]);
		write_value(json[xs("visuals")][xs("removals[2]")], visuals::removals[2]);
		write_value(json[xs("movement")][xs("pixel_surf")], movement::pixel_surf);
		write_value(json[xs("movement")][xs("freelook_surf")], movement::freelook_surf);
		write_value(json[xs("movement")][xs("pixel_surf_ticks")], movement::pixel_surf_ticks);
		write_value(json[xs("movement")][xs("pixel_surf_key")], movement::pixel_surf_key);
		write_value(json[xs("movement")][xs("pixel_surf_key_s")], movement::pixel_surf_key_s);
		write_value(json[xs("movement")][xs("pixel_surf_fix")], movement::pixel_surf_fix);
		write_value(json[xs("movement")][xs("pixel_surf_detection_printf")], movement::pixel_surf_detection_printf);
		write_value(json[xs("movement")][xs("jump_bug_key_s")], movement::jump_bug_key_s);
		write_value(json[xs("movement")][xs("edge_bug_key_s")], movement::edge_bug_key_s);
		write_value(json[xs("movement")][xs("mini_jump_key_s")], movement::mini_jump_key_s);
		write_value(json[xs("movement")][xs("mini_jump_ej")], movement::mini_jump_ej);
		write_value(json[xs("movement")][xs("long_jump_key_s")], movement::long_jump_key_s);
		write_value(json[xs("visuals")][xs("dropped_weapon_glow_clr[0]")], visuals::dropped_weapon_glow_clr[0]);
		write_value(json[xs("visuals")][xs("dropped_weapon_glow_clr[1]")], visuals::dropped_weapon_glow_clr[1]);
		write_value(json[xs("visuals")][xs("dropped_weapon_glow_clr[2]")], visuals::dropped_weapon_glow_clr[2]);
		write_value(json[xs("visuals")][xs("dropped_weapon_glow")], visuals::dropped_weapon_glow);
		write_value(json[xs("movement")][xs("long_jump_key")], movement::long_jump_key);
		write_value(json[xs("visuals")][xs("dropped_weapon_type")], visuals::dropped_weapon_type);
		write_value(json[xs("movement")][xs("adaptive_key_for[0]")], movement::adaptive_key_for[0]);
		write_value(json[xs("movement")][xs("adaptive_key_for[1]")], movement::adaptive_key_for[1]);
		write_value(json[xs("movement")][xs("adaptive_key_for[3]")], movement::adaptive_key_for[3]);
		write_value(json[xs("movement")][xs("adaptive_key_cancelling")], movement::adaptive_key_cancelling);
		write_value(json[xs("movement")][xs("lj_null[0]")], movement::lj_null[0]);
		write_value(json[xs("movement")][xs("lj_null[1]")], movement::lj_null[1]);
		write_value(json[xs("movement")][xs("lj_null[2]")], movement::lj_null[2]);
		write_value(json[xs("movement")][xs("lj_null[3]")], movement::lj_null[3]);
		write_value(json[xs("fonts")][xs("indi_font")], fonts::indi_font);
		write_value(json[xs("fonts")][xs("indi_size")], fonts::indi_size);
		write_value(json[xs("fonts")][xs("sub_indi_font")], fonts::sub_indi_font);
		write_value(json[xs("fonts")][xs("sub_indi_size")], fonts::sub_indi_size);
		write_value(json[xs("fonts")][xs("spec_font")], fonts::spec_font);
		write_value(json[xs("fonts")][xs("sub_spec_font")], fonts::sub_spec_font);
		write_value(json[xs("fonts")][xs("esp_hp_font")], fonts::esp_hp_font);
		write_value(json[xs("fonts")][xs("esp_hp_size")], fonts::esp_hp_size);
		write_value(json[xs("fonts")][xs("esp_name_font")], fonts::esp_name_font);
		write_value(json[xs("fonts")][xs("esp_name_size")], fonts::esp_name_size);
		write_value(json[xs("fonts")][xs("esp_wpn_font")], fonts::esp_wpn_font);
		write_value(json[xs("fonts")][xs("esp_wpn_size")], fonts::esp_wpn_size);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font")], fonts::esp_dropped_wpn_font);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_size")], fonts::esp_dropped_wpn_size);
		write_value(json[xs("fonts")][xs("sc_logs_font")], fonts::sc_logs_font);
		write_value(json[xs("fonts")][xs("sc_logs_size")], fonts::sc_logs_size);
		write_value(json[xs("fonts")][xs("spec_font_flag[0]")], fonts::spec_font_flag[0]);
		write_value(json[xs("fonts")][xs("spec_font_flag[1]")], fonts::spec_font_flag[1]);
		write_value(json[xs("fonts")][xs("spec_font_flag[2]")], fonts::spec_font_flag[2]);
		write_value(json[xs("fonts")][xs("spec_font_flag[3]")], fonts::spec_font_flag[3]);
		write_value(json[xs("fonts")][xs("spec_font_flag[4]")], fonts::spec_font_flag[4]);
		write_value(json[xs("fonts")][xs("spec_font_flag[5]")], fonts::spec_font_flag[5]);
		write_value(json[xs("fonts")][xs("spec_font_flag[6]")], fonts::spec_font_flag[6]);
		write_value(json[xs("fonts")][xs("spec_font_flag[7]")], fonts::spec_font_flag[7]);
		write_value(json[xs("fonts")][xs("spec_font_flag[8]")], fonts::spec_font_flag[8]);
		write_value(json[xs("fonts")][xs("spec_font_flag[9]")], fonts::spec_font_flag[9]);
		write_value(json[xs("fonts")][xs("sub_spec_font_flag[0]")], fonts::sub_spec_font_flag[0]);
		write_value(json[xs("fonts")][xs("sub_spec_font_flag[1]")], fonts::sub_spec_font_flag[1]);
		write_value(json[xs("fonts")][xs("sub_spec_font_flag[2]")], fonts::sub_spec_font_flag[2]);
		write_value(json[xs("fonts")][xs("sub_spec_font_flag[3]")], fonts::sub_spec_font_flag[3]);
		write_value(json[xs("fonts")][xs("sub_spec_font_flag[4]")], fonts::sub_spec_font_flag[4]);
		write_value(json[xs("fonts")][xs("sub_spec_font_flag[5]")], fonts::sub_spec_font_flag[5]);
		write_value(json[xs("fonts")][xs("sub_spec_font_flag[6]")], fonts::sub_spec_font_flag[6]);
		write_value(json[xs("fonts")][xs("sub_spec_font_flag[7]")], fonts::sub_spec_font_flag[7]);
		write_value(json[xs("fonts")][xs("sub_spec_font_flag[8]")], fonts::sub_spec_font_flag[8]);
		write_value(json[xs("fonts")][xs("sub_spec_font_flag[9]")], fonts::sub_spec_font_flag[9]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[0]")], fonts::sub_indi_font_flag[0]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[1]")], fonts::sub_indi_font_flag[1]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[2]")], fonts::sub_indi_font_flag[2]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[3]")], fonts::sub_indi_font_flag[3]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[4]")], fonts::sub_indi_font_flag[4]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[5]")], fonts::sub_indi_font_flag[5]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[6]")], fonts::sub_indi_font_flag[6]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[7]")], fonts::sub_indi_font_flag[7]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[8]")], fonts::sub_indi_font_flag[8]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[9]")], fonts::sub_indi_font_flag[9]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[10]")], fonts::sub_indi_font_flag[10]);
		write_value(json[xs("fonts")][xs("sub_indi_font_flag[11]")], fonts::sub_indi_font_flag[11]);
		write_value(json[xs("fonts")][xs("indi_font_flag[0]")], fonts::indi_font_flag[0]);
		write_value(json[xs("fonts")][xs("indi_font_flag[1]")], fonts::indi_font_flag[1]);
		write_value(json[xs("fonts")][xs("indi_font_flag[2]")], fonts::indi_font_flag[2]);
		write_value(json[xs("fonts")][xs("indi_font_flag[3]")], fonts::indi_font_flag[3]);
		write_value(json[xs("fonts")][xs("indi_font_flag[4]")], fonts::indi_font_flag[4]);
		write_value(json[xs("fonts")][xs("indi_font_flag[5]")], fonts::indi_font_flag[5]);
		write_value(json[xs("fonts")][xs("indi_font_flag[6]")], fonts::indi_font_flag[6]);
		write_value(json[xs("fonts")][xs("indi_font_flag[7]")], fonts::indi_font_flag[7]);
		write_value(json[xs("fonts")][xs("indi_font_flag[8]")], fonts::indi_font_flag[8]);
		write_value(json[xs("fonts")][xs("indi_font_flag[9]")], fonts::indi_font_flag[9]);
		write_value(json[xs("fonts")][xs("indi_font_flag[10]")], fonts::indi_font_flag[10]);
		write_value(json[xs("fonts")][xs("indi_font_flag[11]")], fonts::indi_font_flag[11]);
		write_value(json[xs("fonts")][xs("esp_font_flag[0]")], fonts::esp_font_flag[0]);
		write_value(json[xs("fonts")][xs("esp_font_flag[1]")], fonts::esp_font_flag[1]);
		write_value(json[xs("fonts")][xs("esp_font_flag[2]")], fonts::esp_font_flag[2]);
		write_value(json[xs("fonts")][xs("esp_font_flag[3]")], fonts::esp_font_flag[3]);
		write_value(json[xs("fonts")][xs("esp_font_flag[4]")], fonts::esp_font_flag[4]);
		write_value(json[xs("fonts")][xs("esp_font_flag[5]")], fonts::esp_font_flag[5]);
		write_value(json[xs("fonts")][xs("esp_font_flag[6]")], fonts::esp_font_flag[6]);
		write_value(json[xs("fonts")][xs("esp_font_flag[7]")], fonts::esp_font_flag[7]);
		write_value(json[xs("fonts")][xs("esp_font_flag[8]")], fonts::esp_font_flag[8]);
		write_value(json[xs("fonts")][xs("esp_font_flag[9]")], fonts::esp_font_flag[9]);
		write_value(json[xs("fonts")][xs("esp_font_flag[10]")], fonts::esp_font_flag[10]);
		write_value(json[xs("fonts")][xs("esp_font_flag[11]")], fonts::esp_font_flag[11]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[0]")], fonts::esp_name_font_flag[0]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[1]")], fonts::esp_name_font_flag[1]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[2]")], fonts::esp_name_font_flag[2]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[3]")], fonts::esp_name_font_flag[3]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[4]")], fonts::esp_name_font_flag[4]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[5]")], fonts::esp_name_font_flag[5]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[6]")], fonts::esp_name_font_flag[6]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[7]")], fonts::esp_name_font_flag[7]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[8]")], fonts::esp_name_font_flag[8]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[9]")], fonts::esp_name_font_flag[9]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[10]")], fonts::esp_name_font_flag[10]);
		write_value(json[xs("fonts")][xs("esp_name_font_flag[11]")], fonts::esp_name_font_flag[11]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[0]")], fonts::esp_wpn_font_flag[0]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[1]")], fonts::esp_wpn_font_flag[1]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[2]")], fonts::esp_wpn_font_flag[2]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[3]")], fonts::esp_wpn_font_flag[3]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[4]")], fonts::esp_wpn_font_flag[4]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[5]")], fonts::esp_wpn_font_flag[5]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[6]")], fonts::esp_wpn_font_flag[6]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[7]")], fonts::esp_wpn_font_flag[7]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[8]")], fonts::esp_wpn_font_flag[8]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[9]")], fonts::esp_wpn_font_flag[9]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[10]")], fonts::esp_wpn_font_flag[10]);
		write_value(json[xs("fonts")][xs("esp_wpn_font_flag[11]")], fonts::esp_wpn_font_flag[11]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[0]")], fonts::esp_dropped_wpn_font_flag[0]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[1]")], fonts::esp_dropped_wpn_font_flag[1]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[2]")], fonts::esp_dropped_wpn_font_flag[2]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[3]")], fonts::esp_dropped_wpn_font_flag[3]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[4]")], fonts::esp_dropped_wpn_font_flag[4]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[5]")], fonts::esp_dropped_wpn_font_flag[5]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[6]")], fonts::esp_dropped_wpn_font_flag[6]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[7]")], fonts::esp_dropped_wpn_font_flag[7]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[8]")], fonts::esp_dropped_wpn_font_flag[8]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[9]")], fonts::esp_dropped_wpn_font_flag[9]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[10]")], fonts::esp_dropped_wpn_font_flag[10]);
		write_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[11]")], fonts::esp_dropped_wpn_font_flag[11]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[0]")], fonts::sc_logs_flag[0]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[1]")], fonts::sc_logs_flag[1]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[2]")], fonts::sc_logs_flag[2]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[3]")], fonts::sc_logs_flag[3]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[4]")], fonts::sc_logs_flag[4]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[5]")], fonts::sc_logs_flag[5]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[6]")], fonts::sc_logs_flag[6]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[7]")], fonts::sc_logs_flag[7]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[8]")], fonts::sc_logs_flag[8]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[9]")], fonts::sc_logs_flag[9]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[10]")], fonts::sc_logs_flag[10]);
		write_value(json[xs("fonts")][xs("sc_logs_flag[11]")], fonts::sc_logs_flag[11]);
		write_value(json[xs("sfui")][xs("sfui_on")], sfui::sfui_on);

		path.append(configs.at(index));

		const bool has_json_in_filename = path.rfind((".json")) != std::string::npos;
		if (!has_json_in_filename) {
			path.append((".json"));
		}

		if (std::ofstream output_file{ path }; output_file.good()) {
			output_file << std::setw(4) << json;
		}

		path.erase(path.size() - configs.at(index).size() - (!has_json_in_filename ? 5 : 0));
	}

	void load(const std::size_t index) {
		path.append(configs.at(index));
		path.append((".json"));

		if (std::ifstream input_file{ path }; input_file.good()) {
			nlohmann::json json;
			input_file >> json;

			read_value(json[xs("menu")][xs("fade_speed")], menu::fade_speed);
			read_value(json[xs("menu")][xs("menu_accent[0]")], menu::menu_accent[0]);
			read_value(json[xs("menu")][xs("menu_accent[1]")], menu::menu_accent[1]);
			read_value(json[xs("menu")][xs("menu_accent[2]")], menu::menu_accent[2]);
			read_value(json[xs("skins")][xs("skin_custom_clr")], skins::skin_custom_clr);
			read_value(json[("skins")][("skin_modulation1[0]")], skins::skin_modulation1[0]);
			read_value(json[("skins")][("skin_modulation1[1]")], skins::skin_modulation1[1]);
			read_value(json[("skins")][("skin_modulation1[2]")], skins::skin_modulation1[2]);
			read_value(json[("skins")][("skin_modulation2[0]")], skins::skin_modulation2[0]);
			read_value(json[("skins")][("skin_modulation2[1]")], skins::skin_modulation2[1]);
			read_value(json[("skins")][("skin_modulation2[2]")], skins::skin_modulation2[2]);
			read_value(json[("skins")][("skin_modulation3[0]")], skins::skin_modulation3[0]);
			read_value(json[("skins")][("skin_modulation3[1]")], skins::skin_modulation3[1]);
			read_value(json[("skins")][("skin_modulation3[2]")], skins::skin_modulation3[2]);
			read_value(json[("skins")][("skin_modulation4[0]")], skins::skin_modulation4[0]);
			read_value(json[("skins")][("skin_modulation4[1]")], skins::skin_modulation4[1]);
			read_value(json[("skins")][("skin_modulation4[2]")], skins::skin_modulation4[2]);
			read_value(json[xs("skins")][xs("agent_changer")], skins::agent_changer);
			read_value(json[xs("skins")][xs("agent_t")], skins::agent_t);
			read_value(json[xs("skins")][xs("agent_ct")], skins::agent_ct);
			read_value(json[xs("skins")][xs("knife_changer_enable")], skins::knife_changer_enable);
			read_value(json[xs("skins")][xs("knife_changer_wear")], skins::knife_changer_wear);
			read_value(json[xs("skins")][xs("knife_changer_model")], skins::knife_changer_model);
			read_value(json[xs("skins")][xs("knife_changer_vector_paint_kit")], skins::knife_changer_vector_paint_kit);
			read_value(json[xs("skins")][xs("knife_changer_paint_kit")], skins::knife_changer_paint_kit);
			read_value(json[xs("skins")][xs("gloves_endable")], skins::gloves_endable);
			read_value(json[xs("skins")][xs("gloves_model")], skins::gloves_model);
			read_value(json[xs("skins")][xs("gloves_skin")], skins::gloves_skin);
			read_value(json[xs("skins")][xs("gloves_skin_id")], skins::gloves_skin_id);
			read_value(json[xs("skins")][xs("gloves_wear")], skins::gloves_wear);
			read_value(json[xs("skins")][xs("weapon_endable")], skins::weapon_endable);
			read_value(json[xs("movement")][xs("bhop")], movement::bhop);
			read_value(json[xs("movement")][xs("auto_strafe")], movement::auto_strafe);
			read_value(json[xs("movement")][xs("auto_strafe_key")], movement::auto_strafe_key);
			read_value(json[xs("movement")][xs("auto_strafe_key_s")], movement::auto_strafe_key_s);
			read_value(json[xs("movement")][xs("strafe_optimizer")], movement::strafe_optimizer);
			read_value(json[xs("movement")][xs("strafe_optimizer_key")], movement::strafe_optimizer_key);
			read_value(json[xs("movement")][xs("strafe_optimizer_key_s")], movement::strafe_optimizer_key_s);
			read_value(json[xs("movement")][xs("strafe_optimizer_required_speed")], movement::strafe_optimizer_required_speed);
			read_value(json[xs("movement")][xs("strafe_optimizer_desired_gain")], movement::strafe_optimizer_desired_gain);
			read_value(json[xs("movement")][xs("mouse_strafe_limiter")], movement::mouse_strafe_limiter);
			read_value(json[xs("movement")][xs("mouse_strafe_limiter_affect_pitch")], movement::mouse_strafe_limiter_affect_pitch);
			read_value(json[xs("movement")][xs("mouse_strafe_limiter_key")], movement::mouse_strafe_limiter_key);
			read_value(json[xs("movement")][xs("mouse_strafe_limiter_key_s")], movement::mouse_strafe_limiter_key_s);
			read_value(json[xs("movement")][xs("mouse_strafe_limiter_value")], movement::mouse_strafe_limiter_value);
			read_value(json[xs("movement")][xs("edge_jump")], movement::edge_jump);
			read_value(json[xs("movement")][xs("edge_jump_on_ladder")], movement::edge_jump_on_ladder);
			read_value(json[xs("movement")][xs("ladder_bug")], movement::ladder_bug);
			read_value(json[xs("movement")][xs("ladder_bug_detection_printf")], movement::ladder_bug_detection_printf);
			read_value(json[xs("movement")][xs("ladder_bug_key")], movement::ladder_bug_key);
			read_value(json[xs("movement")][xs("ladder_bug_key_s")], movement::ladder_bug_key_s);
			read_value(json[xs("movement")][xs("edge_jump_key")], movement::edge_jump_key);
			read_value(json[xs("movement")][xs("long_jump_on_edge")], movement::long_jump_on_edge);
			read_value(json[xs("movement")][xs("mini_jump")], movement::mini_jump);
			read_value(json[xs("movement")][xs("mini_jump_key")], movement::mini_jump_key);
			read_value(json[xs("movement")][xs("jump_bug")], movement::jump_bug);
			read_value(json[xs("movement")][xs("jump_bug_key")], movement::jump_bug_key);
			read_value(json[xs("movement")][xs("crouch_bug")], movement::crouch_bug);
			read_value(json[xs("movement")][xs("crouch_bug_key")], movement::crouch_bug_key);
			read_value(json[xs("movement")][xs("crouch_bug_key_s")], movement::crouch_bug_key_s);
			read_value(json[xs("movement")][xs("edge_bug_priority")], movement::edge_bug_priority);
			read_value(json[xs("movement")][xs("edge_bug")], movement::edge_bug);
			read_value(json[xs("movement")][xs("visualize_edge_bug")], movement::visualize_edge_bug);
			read_value(json[xs("movement")][xs("edge_bug_advanced_search")], movement::edge_bug_advanced_search);
			read_value(json[xs("movement")][xs("edge_bug_key")], movement::edge_bug_key);
			read_value(json[xs("movement")][xs("edge_bug_ticks")], movement::edge_bug_ticks);
			read_value(json[xs("movement")][xs("edge_bug_rape")], movement::edge_bug_rape);
			read_value(json[xs("movement")][xs("edge_bug_strafe")], movement::edge_bug_strafe);
			read_value(json[xs("movement")][xs("delay_hop")], movement::delay_hop);
			read_value(json[xs("movement")][xs("delay_hop_key")], movement::delay_hop_key);
			read_value(json[xs("movement")][xs("stamina_hop_ticks")], movement::dh_tick);
			read_value(json[xs("movement")][xs("auto_duck")], movement::auto_duck);
			read_value(json[xs("movement")][xs("auto_duck_key")], movement::auto_duck_key);
			read_value(json[xs("movement")][xs("fastduck")], movement::fastduck);
			read_value(json[xs("movement")][xs("edge_bug_lock_amount")], movement::edge_bug_lock_amount);
			read_value(json[xs("movement")][xs("edge_bug_detection_printf")], movement::edge_bug_detection_printf);
			read_value(json[xs("movement")][xs("jump_bug_detection_printf")], movement::jump_bug_detection_printf);
			read_value(json[xs("movement")][xs("long_jump_detection_printf")], movement::long_jump_detection_printf);
			read_value(json[xs("movement")][xs("mini_jump_detection_printf")], movement::mini_jump_detection_printf);			
			read_value(json[xs("movement")][xs("edge_bug_detection_sound")], movement::edge_bug_detection_sound);
			read_value(json[xs("movement")][xs("edge_bug_health_boost_effect")], movement::edge_bug_health_boost_effect);
			read_value(json[xs("movement")][xs("velocity_indicator")], movement::velocity_indicator);
			read_value(json[xs("movement")][xs("velocity_indicator_position")], movement::velocity_indicator_position);
			read_value(json[xs("movement")][xs("velocity_indicator_show_pre")], movement::velocity_indicator_show_pre);
			read_value(json[xs("movement")][xs("velocity_indicator_disable_ong_show_pre")], movement::velocity_indicator_disable_ong_show_pre);
			read_value(json[xs("movement")][xs("velocity_indicator_custom_color")], movement::velocity_indicator_custom_color);
			read_value(json[xs("movement")][xs("velocity_indicator_negative_clr[0]")], movement::velocity_indicator_negative_clr[0]);
			read_value(json[xs("movement")][xs("velocity_indicator_negative_clr[1]")], movement::velocity_indicator_negative_clr[1]);
			read_value(json[xs("movement")][xs("velocity_indicator_negative_clr[2]")], movement::velocity_indicator_negative_clr[2]);
			read_value(json[xs("movement")][xs("velocity_indicator_neutral_clr[0]")], movement::velocity_indicator_neutral_clr[0]);
			read_value(json[xs("movement")][xs("velocity_indicator_neutral_clr[1]")], movement::velocity_indicator_neutral_clr[1]);
			read_value(json[xs("movement")][xs("velocity_indicator_neutral_clr[2]")], movement::velocity_indicator_neutral_clr[2]);
			read_value(json[xs("movement")][xs("velocity_indicator_positive_clr[0]")], movement::velocity_indicator_positive_clr[0]);
			read_value(json[xs("movement")][xs("velocity_indicator_positive_clr[1]")], movement::velocity_indicator_positive_clr[1]);
			read_value(json[xs("movement")][xs("velocity_indicator_positive_clr[2]")], movement::velocity_indicator_positive_clr[2]);
			read_value(json[xs("movement")][xs("velocity_indicator_custom_clr[0]")], movement::velocity_indicator_custom_clr[0]);
			read_value(json[xs("movement")][xs("velocity_indicator_custom_clr[1]")], movement::velocity_indicator_custom_clr[1]);
			read_value(json[xs("movement")][xs("velocity_indicator_custom_clr[2]")], movement::velocity_indicator_custom_clr[2]);
			read_value(json[xs("movement")][xs("velocity_indicator_custom_clr[3]")], movement::velocity_indicator_custom_clr[3]);
			read_value(json[xs("movement")][xs("velocity_indicator_custom_clr2[0]")], movement::velocity_indicator_custom_clr2[0]);
			read_value(json[xs("movement")][xs("velocity_indicator_custom_clr2[1]")], movement::velocity_indicator_custom_clr2[1]);
			read_value(json[xs("movement")][xs("velocity_indicator_custom_clr2[2]")], movement::velocity_indicator_custom_clr2[2]);
			read_value(json[xs("movement")][xs("velocity_indicator_fade_clr3[0]")], movement::velocity_indicator_fade_clr3[0]);
			read_value(json[xs("movement")][xs("velocity_indicator_fade_clr3[1]")], movement::velocity_indicator_fade_clr3[1]);
			read_value(json[xs("movement")][xs("velocity_indicator_fade_clr3[2]")], movement::velocity_indicator_fade_clr3[2]);
			read_value(json[xs("movement")][xs("velocity_indicator_fade_clr3[3]")], movement::velocity_indicator_fade_clr3[3]);
			read_value(json[xs("movement")][xs("indicator_detect_clr[0]")], movement::indicator_detect_clr[0]);
			read_value(json[xs("movement")][xs("indicator_detect_clr[1]")], movement::indicator_detect_clr[1]);
			read_value(json[xs("movement")][xs("indicator_detect_clr[2]")], movement::indicator_detect_clr[2]);			
			read_value(json[xs("movement")][xs("indicators_show[0]")], movement::indicators_show[0]);
			read_value(json[xs("movement")][xs("indicators_show[1]")], movement::indicators_show[1]);
			read_value(json[xs("movement")][xs("indicators_show[2]")], movement::indicators_show[2]);
			read_value(json[xs("movement")][xs("indicators_show[3]")], movement::indicators_show[3]);
			read_value(json[xs("movement")][xs("indicators_show[4]")], movement::indicators_show[4]);
			read_value(json[xs("movement")][xs("indicators_show[5]")], movement::indicators_show[5]);
			read_value(json[xs("movement")][xs("indicators_show[6]")], movement::indicators_show[6]);
			read_value(json[xs("movement")][xs("indicators_show[7]")], movement::indicators_show[7]);
			read_value(json[xs("movement")][xs("detection_clr_for[0]")], movement::detection_clr_for[0]);
			read_value(json[xs("movement")][xs("detection_clr_for[1]")], movement::detection_clr_for[1]);
			read_value(json[xs("movement")][xs("detection_clr_for[2]")], movement::detection_clr_for[2]);
			read_value(json[xs("movement")][xs("detection_clr_for[3]")], movement::detection_clr_for[3]);
			read_value(json[xs("movement")][xs("detection_clr_for[4]")], movement::detection_clr_for[4]);
			read_value(json[xs("movement")][xs("detection_clr_for[5]")], movement::detection_clr_for[5]);
			read_value(json[xs("movement")][xs("detection_clr_for[6]")], movement::detection_clr_for[6]);
			read_value(json[xs("movement")][xs("detection_clr_for[7]")], movement::detection_clr_for[7]);
			read_value(json[xs("movement")][xs("allow_detection_clr")], movement::allow_detection_clr);
			read_value(json[xs("movement")][xs("detection_saved_tick")], movement::detection_saved_tick);
			read_value(json[xs("movement")][xs("indicators_allow_animation")], movement::indicators_allow_animation);
			read_value(json[xs("movement")][xs("stamina_indicator")], movement::stamina_indicator);
			read_value(json[xs("movement")][xs("stamina_indicator")], movement::stamina_indicator);
			read_value(json[xs("movement")][xs("stamina_indicator_fade")], movement::stamina_indicator_fade);
			read_value(json[xs("movement")][xs("stamina_indicator_show_pre")], movement::stamina_indicator_show_pre);
			read_value(json[xs("movement")][xs("stamina_indicator_disable_ong_show_pre")], movement::stamina_indicator_disable_ong_show_pre);
			read_value(json[xs("movement")][xs("stamina_indicator_position")], movement::stamina_indicator_position);
			read_value(json[xs("movement")][xs("stamina_indicator_clr[0]")], movement::stamina_indicator_clr[0]);
			read_value(json[xs("movement")][xs("stamina_indicator_clr[1]")], movement::stamina_indicator_clr[1]);
			read_value(json[xs("movement")][xs("stamina_indicator_clr[2]")], movement::stamina_indicator_clr[2]);
			read_value(json[xs("movement")][xs("stamina_fade_clr[0]")], movement::stamina_fade_clr[0]);
			read_value(json[xs("movement")][xs("stamina_fade_clr[1]")], movement::stamina_fade_clr[1]);
			read_value(json[xs("movement")][xs("stamina_fade_clr[2]")], movement::stamina_fade_clr[2]);
			read_value(json[xs("movement")][xs("stamina_fade_clr[3]")], movement::stamina_fade_clr[3]);
			read_value(json[xs("movement")][xs("velocity_graph")], movement::velocity_graph);
			read_value(json[xs("movement")][xs("velocity_graph_color[0]")], movement::velocity_graph_color[0]);
			read_value(json[xs("movement")][xs("velocity_graph_color[1]")], movement::velocity_graph_color[1]);
			read_value(json[xs("movement")][xs("velocity_graph_color[2]")], movement::velocity_graph_color[2]);
			read_value(json[xs("movement")][xs("velocity_linewidth")], movement::velocity_linewidth);
			read_value(json[xs("movement")][xs("velocity_height")], movement::velocity_height);
			read_value(json[xs("movement")][xs("velocity_size")], movement::velocity_size);
			read_value(json[xs("movement")][xs("graph_xscreenpos")], movement::graph_xscreenpos);
			read_value(json[xs("movement")][xs("velocity_graph_show_landed_speed")], movement::velocity_graph_show_landed_speed);
			read_value(json[xs("movement")][xs("velocity_graph_show_edge_bug")], movement::velocity_graph_show_edge_bug);
			read_value(json[xs("movement")][xs("velocity_graph_show_jump_bug")], movement::velocity_graph_show_jump_bug);
			read_value(json[xs("movement")][xs("stamina_graph")], movement::stamina_graph);
			read_value(json[xs("movement")][xs("stamina_graph_color[0]")], movement::stamina_graph_color[0]);
			read_value(json[xs("movement")][xs("stamina_graph_color[1]")], movement::stamina_graph_color[1]);
			read_value(json[xs("movement")][xs("stamina_graph_color[2]")], movement::stamina_graph_color[2]);
			read_value(json[xs("movement")][xs("stamina_graph_offset")], movement::stamina_graph_offset);
			read_value(json[xs("movement")][xs("stamina_graph_height")], movement::stamina_graph_height);
			read_value(json[xs("movement")][xs("stamina_graph_offset_x")], movement::stamina_graph_offset_x);
			read_value(json[xs("movement")][xs("graph_fade")], movement::graph_fade);
			read_value(json[xs("misc")][xs("watermark")], misc::watermark);
			read_value(json[xs("misc")][xs("unlock_inventory")], misc::unlock_inventory);
			read_value(json[xs("misc")][xs("show_spotify_currently_playing")], misc::show_spotify_currently_playing);
			read_value(json[xs("misc")][xs("movement_rec")], misc::movement_rec);
			read_value(json[xs("misc")][xs("movement_rec_smoothing")], misc::movement_rec_smoothing);
			read_value(json[xs("misc")][xs("movement_rec_lockva")], misc::movement_rec_lockva);
			read_value(json[xs("misc")][xs("movement_rec_ringsize")], misc::movement_rec_ringsize);
			read_value(json[xs("misc")][xs("movement_rec_keystartrecord")], misc::movement_rec_keystartrecord);
			read_value(json[xs("misc")][xs("movement_rec_keystoprecord")], misc::movement_rec_keystoprecord);
			read_value(json[xs("misc")][xs("movement_rec_keystartplayback")], misc::movement_rec_keystartplayback);
			read_value(json[xs("misc")][xs("movement_rec_keystopplayback")], misc::movement_rec_keystopplayback);
			read_value(json[xs("misc")][xs("movement_rec_keyclearrecord")], misc::movement_rec_keyclearrecord);
			read_value(json[xs("misc")][xs("spectators_list")], misc::spectators_list);
			read_value(json[xs("misc")][xs("spectatorlist_type")], misc::spectatorlist_type);
			read_value(json[xs("misc")][xs("spectatorlist_show_target")], misc::spectatorlist_show_target);
			read_value(json[xs("misc")][xs("custom_console")], misc::custom_console);
			read_value(json[xs("misc")][xs("custom_console_clr[0]")], misc::custom_console_clr[0]);
			read_value(json[xs("misc")][xs("custom_console_clr[1]")], misc::custom_console_clr[1]);
			read_value(json[xs("misc")][xs("custom_console_clr[2]")], misc::custom_console_clr[2]);
			read_value(json[xs("misc")][xs("custom_console_clr[3]")], misc::custom_console_clr[3]);
			read_value(json[xs("misc")][xs("spectators_list_color_1[0]")], misc::spectators_list_color_1[0]);
			read_value(json[xs("misc")][xs("spectators_list_color_1[1]")], misc::spectators_list_color_1[1]);
			read_value(json[xs("misc")][xs("spectators_list_color_1[2]")], misc::spectators_list_color_1[2]);
			read_value(json[xs("misc")][xs("spectators_list_color_2[0]")], misc::spectators_list_color_2[0]);
			read_value(json[xs("misc")][xs("spectators_list_color_2[1]")], misc::spectators_list_color_2[1]);
			read_value(json[xs("misc")][xs("spectators_list_color_2[2]")], misc::spectators_list_color_2[2]);
			read_value(json[xs("misc")][xs("spectators_list_clr[0]")], misc::spectators_list_clr[0]);
			read_value(json[xs("misc")][xs("spectators_list_clr[1]")], misc::spectators_list_clr[1]);
			read_value(json[xs("misc")][xs("spectators_list_clr[2]")], misc::spectators_list_clr[2]);
			read_value(json[xs("misc")][xs("spectators_list_clr_2[0]")], misc::spectators_list_clr_2[0]);
			read_value(json[xs("misc")][xs("spectators_list_clr_2[1]")], misc::spectators_list_clr_2[1]);
			read_value(json[xs("misc")][xs("spectators_list_clr_2[2]")], misc::spectators_list_clr_2[2]);
			read_value(json[xs("misc")][xs("field_of_view")], misc::field_of_view);
			read_value(json[xs("misc")][xs("enable_fov")], misc::enable_fov);
			read_value(json[xs("misc")][xs("view_model")], misc::view_model);
			read_value(json[xs("misc")][xs("view_model_x")], misc::view_model_x);
			read_value(json[xs("misc")][xs("view_model_y")], misc::view_model_y);
			read_value(json[xs("misc")][xs("view_model_z")], misc::view_model_z);
			read_value(json[xs("misc")][xs("aspect_ratio")], misc::aspect_ratio);
			read_value(json[xs("misc")][xs("aspect_ratio_amount")], misc::aspect_ratio_amount);
			read_value(json[xs("misc")][xs("thirdperson")], misc::thirdperson);
			read_value(json[xs("misc")][xs("thirdperson_key")], misc::thirdperson_key);
			read_value(json[xs("misc")][xs("thirdperson_distance")], misc::thirdperson_distance);
			read_value(json[xs("misc")][xs("practice")], misc::practice);
			read_value(json[xs("misc")][xs("savepos")], misc::savepos);
			read_value(json[xs("misc")][xs("loadpos")], misc::loadpos);
			read_value(json[xs("misc")][xs("nextkey")], misc::nextkey);
			read_value(json[xs("misc")][xs("prevkey")], misc::prevkey);
			read_value(json[xs("misc")][xs("undokey")], misc::undokey);
			read_value(json[xs("misc")][xs("discord_rpc")], misc::discord_rpc);
			read_value(json[xs("misc")][xs("mouse_fix")], misc::mouse_fix);
			read_value(json[xs("misc")][xs("jumpstats")], misc::jumpstats);
			read_value(json[xs("misc")][xs("jumpstats_show_clr_fail")], misc::jumpstats_show_clr_fail);
			read_value(json[xs("misc")][xs("jumpstats_show_fail")], misc::jumpstats_show_fail);
			read_value(json[xs("misc")][xs("misc_reveal_ranks")], misc::misc_reveal_ranks);
			read_value(json[xs("misc")][xs("misc_hitmarker_sound_type")], misc::misc_hitmarker_sound_type);
			read_value(json[xs("misc")][xs("freecam")], misc::freecam);
			read_value(json[xs("misc")][xs("freecam_key")], misc::freecam_key);
			read_value(json[xs("visuals")][xs("skeletonesp_clr[0]")], visuals::skeletonesp_clr[0]);
			read_value(json[xs("visuals")][xs("skeletonesp_clr[1]")], visuals::skeletonesp_clr[1]);
			read_value(json[xs("visuals")][xs("skeletonesp_clr[2]")], visuals::skeletonesp_clr[2]);
			read_value(json[xs("visuals")][xs("skeletonbt_clr[0]")], visuals::skeletonbt_clr[0]);
			read_value(json[xs("visuals")][xs("skeletonbt_clr[1]")], visuals::skeletonbt_clr[1]);
			read_value(json[xs("visuals")][xs("skeletonbt_clr[2]")], visuals::skeletonbt_clr[2]);
			read_value(json[xs("visuals")][xs("selected_tick_clr[0]")], visuals::selected_tick_clr[0]);
			read_value(json[xs("visuals")][xs("selected_tick_clr[1]")], visuals::selected_tick_clr[1]);
			read_value(json[xs("visuals")][xs("selected_tick_clr[2]")], visuals::selected_tick_clr[2]);
			read_value(json[xs("visuals")][xs("glow_visible_clr[0]")], visuals::glow_visible_clr[0]);
			read_value(json[xs("visuals")][xs("glow_visible_clr[1]")], visuals::glow_visible_clr[1]);
			read_value(json[xs("visuals")][xs("glow_visible_clr[2]")], visuals::glow_visible_clr[2]);
			read_value(json[xs("visuals")][xs("glow_visible_clr[3]")], visuals::glow_visible_clr[3]);
			read_value(json[xs("visuals")][xs("glow_invisible_clr[0]")], visuals::glow_invisible_clr[0]);
			read_value(json[xs("visuals")][xs("glow_invisible_clr[1]")], visuals::glow_invisible_clr[1]);
			read_value(json[xs("visuals")][xs("glow_invisible_clr[2]")], visuals::glow_invisible_clr[2]);
			read_value(json[xs("visuals")][xs("glow_invisible_clr[3]")], visuals::glow_invisible_clr[3]);
			read_value(json[xs("visuals")][xs("glow_weapon_clr[0]")], visuals::glow_weapon_clr[0]);
			read_value(json[xs("visuals")][xs("glow_weapon_clr[1]")], visuals::glow_weapon_clr[1]);
			read_value(json[xs("visuals")][xs("glow_weapon_clr[2]")], visuals::glow_weapon_clr[2]);
			read_value(json[xs("visuals")][xs("glow_weapon_clr[3]")], visuals::glow_weapon_clr[3]);
			read_value(json[xs("visuals")][xs("enable_visuals")], visuals::enable_visuals);
			read_value(json[xs("visuals")][xs("fade_animation")], visuals::fade_animation);
			read_value(json[xs("visuals")][xs("playerbox")], visuals::playerbox);
			read_value(json[xs("visuals")][xs("playerbox_color[0]")], visuals::playerbox_color[0]);
			read_value(json[xs("visuals")][xs("playerbox_color[1]")], visuals::playerbox_color[1]);
			read_value(json[xs("visuals")][xs("playerbox_color[2]")], visuals::playerbox_color[2]);
			read_value(json[xs("visuals")][xs("playername")], visuals::playername);
			read_value(json[xs("visuals")][xs("playername_color[0]")], visuals::playername_color[0]);
			read_value(json[xs("visuals")][xs("playername_color[1]")], visuals::playername_color[1]);
			read_value(json[xs("visuals")][xs("playername_color[2]")], visuals::playername_color[2]);
			read_value(json[xs("visuals")][xs("health_color[0]")], visuals::health_color[0]);
			read_value(json[xs("visuals")][xs("health_color[1]")], visuals::health_color[1]);
			read_value(json[xs("visuals")][xs("health_color[2]")], visuals::health_color[2]);
			read_value(json[xs("visuals")][xs("playerweapon")], visuals::playerweapon);
			read_value(json[xs("visuals")][xs("player_weapon_type[0]")], visuals::player_weapon_type[0]);
			read_value(json[xs("visuals")][xs("player_weapon_type[1]")], visuals::player_weapon_type[1]);			
			read_value(json[xs("visuals")][xs("skeleton")], visuals::skeleton);
			read_value(json[xs("visuals")][xs("skeleton_last_clr[0]")], visuals::skeleton_last_clr[0]);
			read_value(json[xs("visuals")][xs("skeleton_last_clr[1]")], visuals::skeleton_last_clr[1]);
			read_value(json[xs("visuals")][xs("skeleton_last_clr[2]")], visuals::skeleton_last_clr[2]);
			read_value(json[xs("visuals")][xs("skeleton_last")], visuals::skeleton_last);
			read_value(json[xs("visuals")][xs("healthesp")], visuals::healthesp);
			read_value(json[xs("visuals")][xs("healthesp_s")], visuals::healthesp_s);
			read_value(json[xs("visuals")][xs("override_bar")], visuals::override_bar);
			read_value(json[xs("visuals")][xs("gradient_bar")], visuals::gradient_bar);
			read_value(json[xs("visuals")][xs("health_bar_gradient[0]")], visuals::health_bar_gradient[0]);
			read_value(json[xs("visuals")][xs("health_bar_gradient[1]")], visuals::health_bar_gradient[1]);
			read_value(json[xs("visuals")][xs("health_bar_gradient[2]")], visuals::health_bar_gradient[2]);
			read_value(json[xs("visuals")][xs("healthesp_s")], visuals::healthesp_s);
			read_value(json[xs("visuals")][xs("health_bar[0]")], visuals::health_bar[0]);
			read_value(json[xs("visuals")][xs("health_bar[1]")], visuals::health_bar[1]);
			read_value(json[xs("visuals")][xs("health_bar[2]")], visuals::health_bar[2]);
			read_value(json[xs("visuals")][xs("oof_arrows")], visuals::oof_arrows);
			read_value(json[xs("visuals")][xs("oof_arrows_clr[0]")], visuals::oof_arrows_clr[0]);
			read_value(json[xs("visuals")][xs("oof_arrows_clr[1]")], visuals::oof_arrows_clr[1]);
			read_value(json[xs("visuals")][xs("oof_arrows_clr[2]")], visuals::oof_arrows_clr[2]);
			read_value(json[xs("visuals")][xs("oof_arrows_clr[3]")], visuals::oof_arrows_clr[3]);
			read_value(json[xs("visuals")][xs("oof_arrows_clr2[0]")], visuals::oof_arrows_clr2[0]);
			read_value(json[xs("visuals")][xs("oof_arrows_clr2[1]")], visuals::oof_arrows_clr2[1]);
			read_value(json[xs("visuals")][xs("oof_arrows_clr2[2]")], visuals::oof_arrows_clr2[2]);
			read_value(json[xs("visuals")][xs("oof_arrows_clr2[3]")], visuals::oof_arrows_clr2[3]);
			read_value(json[xs("visuals")][xs("oof_arrows_dist")], visuals::oof_arrows_dist);
			read_value(json[xs("visuals")][xs("oof_arrows_size")], visuals::oof_arrows_size);
			read_value(json[xs("visuals")][xs("skeletonesp")], visuals::skeletonesp);
			read_value(json[xs("visuals")][xs("radar")], visuals::radar);
			read_value(json[xs("visuals")][xs("gravity_ragdoll")], visuals::gravity_ragdoll);
			read_value(json[xs("visuals")][xs("backtrack_chams")], chams::backtrack_chams);
			read_value(json[xs("visuals")][xs("backtrack_chams_draw_all_ticks")], chams::backtrack_chams_draw_all_ticks);
			read_value(json[xs("visuals")][xs("backtrack_chams_gradient")], chams::backtrack_chams_gradient);
			read_value(json[xs("visuals")][xs("backtrack_chams_clr1[0]")], chams::backtrack_chams_clr1[0]);
			read_value(json[xs("visuals")][xs("backtrack_chams_clr1[1]")], chams::backtrack_chams_clr1[1]);
			read_value(json[xs("visuals")][xs("backtrack_chams_clr1[2]")], chams::backtrack_chams_clr1[2]);
			read_value(json[xs("visuals")][xs("backtrack_chams_clr1[3]")], chams::backtrack_chams_clr1[3]);
			read_value(json[xs("visuals")][xs("backtrack_chams_clr2[0]")], chams::backtrack_chams_clr2[0]);
			read_value(json[xs("visuals")][xs("backtrack_chams_clr2[1]")], chams::backtrack_chams_clr2[1]);
			read_value(json[xs("visuals")][xs("backtrack_chams_clr2[2]")], chams::backtrack_chams_clr2[2]);
			read_value(json[xs("visuals")][xs("backtrack_chams_clr2[3]")], chams::backtrack_chams_clr2[3]);
			read_value(json[xs("visuals")][xs("sleeve_chams_clr[0]")], chams::sleeve_chams_clr[0]);
			read_value(json[xs("visuals")][xs("sleeve_chams_clr[1]")], chams::sleeve_chams_clr[1]);
			read_value(json[xs("visuals")][xs("sleeve_chams_clr[2]")], chams::sleeve_chams_clr[2]);
			read_value(json[xs("visuals")][xs("sleeve_chams_clr[3]")], chams::sleeve_chams_clr[3]);
			read_value(json[xs("visuals")][xs("arms_chams_clr[0]")], chams::arms_chams_clr[0]);
			read_value(json[xs("visuals")][xs("arms_chams_clr[1]")], chams::arms_chams_clr[1]);
			read_value(json[xs("visuals")][xs("arms_chams_clr[2]")], chams::arms_chams_clr[2]);
			read_value(json[xs("visuals")][xs("arms_chams_clr[3]")], chams::arms_chams_clr[3]);
			read_value(json[xs("visuals")][xs("sleeve_chams_clr_ov[0]")], chams::sleeve_chams_clr_ov[0]);
			read_value(json[xs("visuals")][xs("sleeve_chams_clr_ov[1]")], chams::sleeve_chams_clr_ov[1]);
			read_value(json[xs("visuals")][xs("sleeve_chams_clr_ov[2]")], chams::sleeve_chams_clr_ov[2]);
			read_value(json[xs("visuals")][xs("sleeve_chams_clr_ov[3]")], chams::sleeve_chams_clr_ov[3]);
			read_value(json[xs("visuals")][xs("arms_chams_clr_ov[0]")], chams::arms_chams_clr_ov[0]);
			read_value(json[xs("visuals")][xs("arms_chams_clr_ov[1]")], chams::arms_chams_clr_ov[1]);
			read_value(json[xs("visuals")][xs("arms_chams_clr_ov[2]")], chams::arms_chams_clr_ov[2]);
			read_value(json[xs("visuals")][xs("arms_chams_clr_ov[3]")], chams::arms_chams_clr_ov[3]);
			read_value(json[xs("visuals")][xs("wpn_chams_clr[0]")], chams::wpn_chams_clr[0]);
			read_value(json[xs("visuals")][xs("wpn_chams_clr[1]")], chams::wpn_chams_clr[1]);
			read_value(json[xs("visuals")][xs("wpn_chams_clr[2]")], chams::wpn_chams_clr[2]);
			read_value(json[xs("visuals")][xs("wpn_chams_clr[3]")], chams::wpn_chams_clr[3]);
			read_value(json[xs("visuals")][xs("wpn_chams_clr_ov[0]")], chams::wpn_chams_clr_ov[0]);
			read_value(json[xs("visuals")][xs("wpn_chams_clr_ov[1]")], chams::wpn_chams_clr_ov[1]);
			read_value(json[xs("visuals")][xs("wpn_chams_clr_ov[2]")], chams::wpn_chams_clr_ov[2]);
			read_value(json[xs("visuals")][xs("wpn_chams_clr_ov[3]")], chams::wpn_chams_clr_ov[3]);
			read_value(json[xs("visuals")][xs("visible_wireframe")], chams::visible_wireframe);
			read_value(json[xs("visuals")][xs("visible_chams_ov")], chams::visible_chams_ov);
			read_value(json[xs("visuals")][xs("visible_wireframe_ov")], chams::visible_wireframe_ov);
			read_value(json[xs("visuals")][xs("invisible_wireframe")], chams::invisible_wireframe);
			read_value(json[xs("visuals")][xs("sleeve_chams")], chams::sleeve_chams);
			read_value(json[xs("visuals")][xs("sleeve_wireframe")], chams::sleeve_wireframe);
			read_value(json[xs("visuals")][xs("arms_chams")], chams::arms_chams);
			read_value(json[xs("visuals")][xs("arms_wireframe")], chams::arms_wireframe);
			read_value(json[xs("visuals")][xs("sleeve_chams_ov")], chams::sleeve_chams_ov);
			read_value(json[xs("visuals")][xs("sleeve_wireframe_ov")], chams::sleeve_wireframe_ov);
			read_value(json[xs("visuals")][xs("arms_chams_ov")], chams::arms_chams_ov);
			read_value(json[xs("visuals")][xs("wpn_chams")], chams::wpn_chams);
			read_value(json[xs("visuals")][xs("wpn_wireframe")], chams::wpn_wireframe);
			read_value(json[xs("visuals")][xs("wpn_chams_ov")], chams::wpn_chams_ov);
			read_value(json[xs("visuals")][xs("wpn_wireframe_ov")], chams::wpn_wireframe_ov);
			read_value(json[xs("visuals")][xs("cham_type_overlay")], chams::cham_type_overlay);
			read_value(json[xs("visuals")][xs("cham_type_sleeve")], chams::cham_type_sleeve);
			read_value(json[xs("visuals")][xs("cham_type_sleeve_ov")], chams::cham_type_sleeve_ov);
			read_value(json[xs("visuals")][xs("cham_type_wpn")], chams::cham_type_wpn);
			read_value(json[xs("visuals")][xs("cham_type_wpn_ov")], chams::cham_type_wpn_ov);
			read_value(json[xs("visuals")][xs("cham_type_arms")], chams::cham_type_arms);
			read_value(json[xs("visuals")][xs("cham_type_arms_ov")], chams::cham_type_arms_ov);
			read_value(json[xs("visuals")][xs("glow")], visuals::glow);
			read_value(json[xs("visuals")][xs("glow_weapon")], visuals::glow_weapon);
			read_value(json[xs("triggerbot")][xs("enabled")], triggerbot::enabled);
			read_value(json[xs("triggerbot")][xs("triggerbot_key")], triggerbot::triggerbot_key);
			read_value(json[xs("triggerbot")][xs("triggerbot_key_s")], triggerbot::triggerbot_key_s);
			read_value(json[xs("aimbot")][xs("backtrack")], backtrack::backtrack);
			read_value(json[xs("aimbot")][xs("time")], backtrack::time);
			read_value(json[xs("aimbot")][xs("fake")], backtrack::fake);
			read_value(json[xs("aimbot")][xs("fake_latency")], backtrack::fake_latency);
			read_value(json[xs("aimbot")][xs("selected_tick")], backtrack::selected_tick);
			read_value(json[xs("movement")][xs("auto_align")], movement::auto_align);
			read_value(json[xs("aimbot")][xs("aimbot")], aimbot::aim_at_bt);
			read_value(json[xs("aimbot")][xs("aimbot")], aimbot::aimbot);
			read_value(json[xs("aimbot")][xs("aimbot_key")], aimbot::aimbot_key);
			read_value(json[xs("aimbot")][xs("pistol_hitbox")], aimbot::pistol_hitbox);
			read_value(json[xs("aimbot")][xs("pistol_aimbot_fov")], aimbot::pistol_aimbot_fov);
			read_value(json[xs("aimbot")][xs("pistol_autowall")], aimbot::pistol_autowall);
			read_value(json[xs("aimbot")][xs("pistol_autowall_dmg")], aimbot::pistol_autowall_dmg);
			read_value(json[xs("aimbot")][xs("heavy_pistol_hitbox")], aimbot::heavy_pistol_hitbox);
			read_value(json[xs("aimbot")][xs("heavy_pistol_aimbot_fov")], aimbot::heavy_pistol_aimbot_fov);
			read_value(json[xs("aimbot")][xs("heavy_pistol_autowall")], aimbot::heavy_pistol_autowall);
			read_value(json[xs("aimbot")][xs("heavy_pistol_autowall_dmg")], aimbot::heavy_pistol_autowall_dmg);
			read_value(json[xs("aimbot")][xs("shotgun_hitbox")], aimbot::shotgun_hitbox);
			read_value(json[xs("aimbot")][xs("shotgun_aimbot_fov")], aimbot::shotgun_aimbot_fov);
			read_value(json[xs("aimbot")][xs("shotgun_autowall")], aimbot::shotgun_autowall);
			read_value(json[xs("aimbot")][xs("heavy_hitbox")], aimbot::heavy_hitbox);
			read_value(json[xs("aimbot")][xs("heavy_aimbot_fov")], aimbot::heavy_aimbot_fov);
			read_value(json[xs("aimbot")][xs("heavy_autowall")], aimbot::heavy_autowall);
			read_value(json[xs("aimbot")][xs("heavy_autowall_dmg")], aimbot::heavy_autowall_dmg);
			read_value(json[xs("aimbot")][xs("smg_hitbox")], aimbot::smg_hitbox);
			read_value(json[xs("aimbot")][xs("smg_aimbot_fov")], aimbot::smg_aimbot_fov);
			read_value(json[xs("aimbot")][xs("smg_autowall")], aimbot::smg_autowall);
			read_value(json[xs("aimbot")][xs("smg_autowall_dmg")], aimbot::smg_autowall_dmg);
			read_value(json[xs("aimbot")][xs("rifle_hitbox")], aimbot::rifle_hitbox);
			read_value(json[xs("aimbot")][xs("rifle_aimbot_fov")], aimbot::rifle_aimbot_fov);
			read_value(json[xs("aimbot")][xs("rifle_autowall")], aimbot::rifle_autowall);
			read_value(json[xs("aimbot")][xs("rifle_autowall_dmg")], aimbot::rifle_autowall_dmg);
			read_value(json[xs("aimbot")][xs("sniper_hitbox")], aimbot::sniper_hitbox);
			read_value(json[xs("aimbot")][xs("sniper_aimbot_fov")], aimbot::sniper_aimbot_fov);
			read_value(json[xs("aimbot")][xs("sniper_autowall")], aimbot::sniper_autowall);
			read_value(json[xs("aimbot")][xs("sniper_autowall_dmg")], aimbot::sniper_autowall_dmg);
			read_value(json[xs("aimbot")][xs("autosniper_hitbox")], aimbot::autosniper_hitbox);
			read_value(json[xs("aimbot")][xs("autosniper_aimbot_fov")], aimbot::autosniper_aimbot_fov);
			read_value(json[xs("aimbot")][xs("autosniper_autowall")], aimbot::autosniper_autowall);
			read_value(json[xs("aimbot")][xs("autosniper_autowall_dmg")], aimbot::autosniper_autowall_dmg);
			read_value(json[xs("aimbot")][xs("aimbot_silent")], aimbot::aimbot_silent);
			read_value(json[xs("aimbot")][xs("non_sticky_aimbot")], aimbot::non_sticky_aimbot);
			read_value(json[xs("visuals")][xs("dropped_weapon_icon")], visuals::dropped_weapon_icon);
			read_value(json[xs("visuals")][xs("dropped_weapon_name")], visuals::dropped_weapon_name);
			read_value(json[xs("visuals")][xs("dropped_weapon_distance")], visuals::dropped_weapon_distance);
			read_value(json[xs("visuals")][xs("dropped_weapon_icon_clr[0]")], visuals::dropped_weapon_icon_clr[0]);
			read_value(json[xs("visuals")][xs("dropped_weapon_box_clr[1]")], visuals::dropped_weapon_icon_clr[1]);
			read_value(json[xs("visuals")][xs("dropped_weapon_icon_clr[2]")], visuals::dropped_weapon_icon_clr[2]);
			read_value(json[xs("visuals")][xs("dropped_weapon_icon_clr[3]")], visuals::dropped_weapon_icon_clr[3]);
			read_value(json[xs("visuals")][xs("dropped_weapon_name_clr[0]")], visuals::dropped_weapon_name_clr[0]);
			read_value(json[xs("visuals")][xs("dropped_weapon_name_clr[1]")], visuals::dropped_weapon_name_clr[1]);
			read_value(json[xs("visuals")][xs("dropped_weapon_name_clr[2]")], visuals::dropped_weapon_name_clr[2]);
			read_value(json[xs("visuals")][xs("dropped_weapon_name_clr[3]")], visuals::dropped_weapon_name_clr[3]);
			read_value(json[xs("misc")][xs("swayscale")], misc::swayscale);
			read_value(json[xs("misc")][xs("swayscale_value")], misc::swayscale_value);
			read_value(json[xs("visuals")][xs("skybox")], visuals::skybox);
			read_value(json[xs("visuals")][xs("visible_chams_clr[0]")], chams::visible_chams_clr[0]);
			read_value(json[xs("visuals")][xs("visible_chams_clr[1]")], chams::visible_chams_clr[1]);
			read_value(json[xs("visuals")][xs("visible_chams_clr[2]")], chams::visible_chams_clr[2]);
			read_value(json[xs("visuals")][xs("visible_chams_clr[3]")], chams::visible_chams_clr[3]);
			read_value(json[xs("visuals")][xs("invisible_chams_clr[0]")], chams::invisible_chams_clr[0]);
			read_value(json[xs("visuals")][xs("invisible_chams_clr[1]")], chams::invisible_chams_clr[1]);
			read_value(json[xs("visuals")][xs("invisible_chams_clr[2]")], chams::invisible_chams_clr[2]);
			read_value(json[xs("visuals")][xs("invisible_chams_clr[3]")], chams::invisible_chams_clr[3]);
			read_value(json[xs("visuals")][xs("invisible_chams")], chams::invisible_chams);
			read_value(json[xs("visuals")][xs("visible_chams")], chams::visible_chams);
			read_value(json[xs("visuals")][xs("cham_type_bt")], chams::cham_type_bt);
			read_value(json[xs("visuals")][xs("cham_type")], chams::cham_type);
			read_value(json[xs("misc")][xs("force_crosshair")], misc::force_crosshair);
			read_value(json[xs("misc")][xs("sniper_crosshair")], misc::sniper_crosshair);
			read_value(json[xs("misc")][xs("misc_animated_clantag")], misc::misc_animated_clantag);
			read_value(json[xs("misc")][xs("misc_clantag_spammer")], misc::misc_clantag_spammer);
			read_value(json[xs("misc")][xs("misc_clantag_speed")], misc::misc_clantag_speed);
			read_value(json[xs("misc")][xs("misc_clantag_type")], misc::misc_clantag_type);
			read_value(json[xs("misc")][xs("misc_hitmarker")], misc::misc_hitmarker);
			read_value(json[xs("misc")][xs("misc_hitmarker_sound")], misc::misc_hitmarker_sound);
			read_value(json[xs("misc")][xs("misc_hitmarker_screen_effect")], misc::misc_hitmarker_screen_effect);
			read_value(json[xs("misc")][xs("misc_kill_msg")], misc::misc_kill_msg);
			read_value(json[xs("visuals")][xs("fullbright")], visuals::fullbright);
			read_value(json[xs("visuals")][xs("apply_zoom")], visuals::apply_zoom);
			read_value(json[xs("visuals")][xs("apply_zoom_key")], visuals::apply_zoom_key);
			read_value(json[xs("visuals")][xs("apply_zoom_key_s")], visuals::apply_zoom_key_s);
			read_value(json[xs("visuals")][xs("boxtype")], visuals::boxtype);
			read_value(json[xs("visuals")][xs("player_box_outline[0]")], visuals::player_box_outline[0]);
			read_value(json[xs("visuals")][xs("player_box_outline[1]")], visuals::player_box_outline[1]);
			read_value(json[xs("visuals")][xs("mbenabled")], visuals::mbenabled);
			read_value(json[xs("visuals")][xs("mbforwardEnabled")], visuals::mbforwardEnabled);
			read_value(json[xs("visuals")][xs("mbfallingMin")], visuals::mbfallingMin);
			read_value(json[xs("visuals")][xs("mbfallingMax")], visuals::mbfallingMax);
			read_value(json[xs("visuals")][xs("mbfallingIntensity")], visuals::mbfallingIntensity);
			read_value(json[xs("visuals")][xs("mbrotationIntensity")], visuals::mbrotationIntensity);
			read_value(json[xs("visuals")][xs("mbstrength")], visuals::mbstrength);
			read_value(json[xs("misc")][xs("nadepred")], misc::nadepred);
			read_value(json[xs("misc")][xs("nadepred_clr[0]")], misc::nadepred_clr[0]);
			read_value(json[xs("misc")][xs("nadepred_clr[1]")], misc::nadepred_clr[1]);
			read_value(json[xs("misc")][xs("nadepred_clr[2]")], misc::nadepred_clr[2]);
			read_value(json[xs("visuals")][xs("flashalpha")], visuals::flashalpha);
			read_value(json[xs("visuals")][xs("change_flashalpha")], visuals::change_flashalpha);
			read_value(json[xs("visuals")][xs("nosmoke")], visuals::nosmoke);
			read_value(json[xs("misc")][xs("autoaccept")], misc::autoaccept);
			read_value(json[xs("visuals")][xs("trails_clr1[0]")], visuals::trails_clr1[0]);
			read_value(json[xs("visuals")][xs("trails_clr1[1]")], visuals::trails_clr1[1]);
			read_value(json[xs("visuals")][xs("trails_clr1[2]")], visuals::trails_clr1[2]);
			read_value(json[xs("visuals")][xs("trails_clr1[3]")], visuals::trails_clr1[3]);
			read_value(json[xs("visuals")][xs("trails_clr2[0]")], visuals::trails_clr2[0]);
			read_value(json[xs("visuals")][xs("trails_clr2[1]")], visuals::trails_clr2[1]);
			read_value(json[xs("visuals")][xs("trails_clr2[2]")], visuals::trails_clr2[2]);
			read_value(json[xs("visuals")][xs("trails_clr2[3]")], visuals::trails_clr2[3]);
			read_value(json[xs("visuals")][xs("world_modulate")], visuals::world_modulate);
			read_value(json[xs("visuals")][xs("world_color[0]")], visuals::world_color[0]);
			read_value(json[xs("visuals")][xs("world_color[1]")], visuals::world_color[1]);
			read_value(json[xs("visuals")][xs("world_color[2]")], visuals::world_color[2]);
			read_value(json[xs("visuals")][xs("world_color[3]")], visuals::world_color[3]);
			read_value(json[xs("visuals")][xs("trails")], visuals::trails);
			read_value(json[xs("movement")][xs("indicators_position")], movement::indicators_position);
			read_value(json[xs("movement")][xs("indicators_gap")], movement::indicators_gap);
			read_value(json[xs("misc")][xs("menu_key")], misc::menu_key);
			read_value(json[xs("misc")][xs("vote_revealer")], misc::vote_revealer);
			read_value(json[xs("misc")][xs("misc_hit_info[0]")], misc::misc_hit_info[0]);
			read_value(json[xs("misc")][xs("misc_hit_info[1]")], misc::misc_hit_info[1]);
		    read_value(json[xs("visuals")][xs("visuals_flags[0]")], visuals::visuals_flags[0]);
			read_value(json[xs("visuals")][xs("visuals_flags[1]")], visuals::visuals_flags[1]);
			read_value(json[xs("visuals")][xs("visuals_flags[2]")], visuals::visuals_flags[2]);
			read_value(json[xs("visuals")][xs("visuals_flags[3]")], visuals::visuals_flags[3]);
			read_value(json[xs("visuals")][xs("visuals_flags[4]")], visuals::visuals_flags[4]);
			read_value(json[xs("visuals")][xs("visuals_flags[5]")], visuals::visuals_flags[5]);
			read_value(json[xs("visuals")][xs("removals[0]")], visuals::removals[0]);
			read_value(json[xs("visuals")][xs("removals[1]")], visuals::removals[1]);
			read_value(json[xs("visuals")][xs("removals[2]")], visuals::removals[2]);
			read_value(json[xs("movement")][xs("pixel_surf")], movement::pixel_surf);
			read_value(json[xs("movement")][xs("pixel_surf_fix")], movement::pixel_surf_fix);
			read_value(json[xs("movement")][xs("freelook_surf")], movement::freelook_surf);
			read_value(json[xs("movement")][xs("pixel_surf_ticks")], movement::pixel_surf_ticks);
			read_value(json[xs("movement")][xs("pixel_surf_key")], movement::pixel_surf_key);
			read_value(json[xs("movement")][xs("pixel_surf_key_s")], movement::pixel_surf_key_s);
			read_value(json[xs("movement")][xs("pixel_surf_detection_printf")], movement::pixel_surf_detection_printf);
			read_value(json[xs("movement")][xs("jump_bug_key_s")], movement::jump_bug_key_s);
			read_value(json[xs("movement")][xs("edge_bug_key_s")], movement::edge_bug_key_s);
			read_value(json[xs("movement")][xs("mini_jump_key_s")], movement::mini_jump_key_s);
			read_value(json[xs("movement")][xs("mini_jump_ej")], movement::mini_jump_ej);
			read_value(json[xs("movement")][xs("long_jump_key_s")], movement::long_jump_key_s);
			read_value(json[xs("visuals")][xs("dropped_weapon_glow_clr[0]")], visuals::dropped_weapon_glow_clr[0]);
			read_value(json[xs("visuals")][xs("dropped_weapon_glow_clr[1]")], visuals::dropped_weapon_glow_clr[1]);
			read_value(json[xs("visuals")][xs("dropped_weapon_glow_clr[2]")], visuals::dropped_weapon_glow_clr[2]);
			read_value(json[xs("visuals")][xs("dropped_weapon_glow")], visuals::dropped_weapon_glow);
			read_value(json[xs("movement")][xs("long_jump_key")], movement::long_jump_key);
			read_value(json[xs("visuals")][xs("dropped_weapon_type")], visuals::dropped_weapon_type);
			read_value(json[xs("movement")][xs("adaptive_key_cancelling")], movement::adaptive_key_cancelling);
			read_value(json[xs("movement")][xs("adaptive_key_for[0]")], movement::adaptive_key_for[0]);
			read_value(json[xs("movement")][xs("adaptive_key_for[1]")], movement::adaptive_key_for[1]);
			read_value(json[xs("movement")][xs("adaptive_key_for[3]")], movement::adaptive_key_for[3]);
			read_value(json[xs("movement")][xs("lj_null[0]")], movement::lj_null[0]);
			read_value(json[xs("movement")][xs("lj_null[1]")], movement::lj_null[1]);
			read_value(json[xs("movement")][xs("lj_null[2]")], movement::lj_null[2]);
			read_value(json[xs("movement")][xs("lj_null[3]")], movement::lj_null[3]);
			read_value(json[xs("movement")][xs("key_strokes")], movement::key_strokes);
			read_value(json[xs("movement")][xs("key_strokes_position")], movement::key_strokes_position);
			read_value(json[xs("fonts")][xs("indi_font")], fonts::indi_font);
			read_value(json[xs("fonts")][xs("indi_size")], fonts::indi_size);
			read_value(json[xs("fonts")][xs("sub_indi_font")], fonts::sub_indi_font);
			read_value(json[xs("fonts")][xs("sub_indi_size")], fonts::sub_indi_size);
			read_value(json[xs("fonts")][xs("spec_font")], fonts::spec_font);
			read_value(json[xs("fonts")][xs("sub_spec_font")], fonts::sub_spec_font);
			read_value(json[xs("fonts")][xs("esp_hp_font")], fonts::esp_hp_font);
			read_value(json[xs("fonts")][xs("esp_hp_size")], fonts::esp_hp_size);
			read_value(json[xs("fonts")][xs("esp_name_font")], fonts::esp_name_font);
			read_value(json[xs("fonts")][xs("esp_name_size")], fonts::esp_name_size);
			read_value(json[xs("fonts")][xs("esp_wpn_font")], fonts::esp_wpn_font);
			read_value(json[xs("fonts")][xs("esp_wpn_size")], fonts::esp_wpn_size);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font")], fonts::esp_dropped_wpn_font);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_size")], fonts::esp_dropped_wpn_size);
			read_value(json[xs("fonts")][xs("sc_logs_font")], fonts::sc_logs_font);
			read_value(json[xs("fonts")][xs("sc_logs_size")], fonts::sc_logs_size);
			read_value(json[xs("fonts")][xs("spec_font_flag[0]")], fonts::spec_font_flag[0]);
			read_value(json[xs("fonts")][xs("spec_font_flag[1]")], fonts::spec_font_flag[1]);
			read_value(json[xs("fonts")][xs("spec_font_flag[2]")], fonts::spec_font_flag[2]);
			read_value(json[xs("fonts")][xs("spec_font_flag[3]")], fonts::spec_font_flag[3]);
			read_value(json[xs("fonts")][xs("spec_font_flag[4]")], fonts::spec_font_flag[4]);
			read_value(json[xs("fonts")][xs("spec_font_flag[5]")], fonts::spec_font_flag[5]);
			read_value(json[xs("fonts")][xs("spec_font_flag[6]")], fonts::spec_font_flag[6]);
			read_value(json[xs("fonts")][xs("spec_font_flag[7]")], fonts::spec_font_flag[7]);
			read_value(json[xs("fonts")][xs("spec_font_flag[8]")], fonts::spec_font_flag[8]);
			read_value(json[xs("fonts")][xs("spec_font_flag[9]")], fonts::spec_font_flag[9]);
			read_value(json[xs("fonts")][xs("sub_spec_font_flag[0]")], fonts::sub_spec_font_flag[0]);
			read_value(json[xs("fonts")][xs("sub_spec_font_flag[1]")], fonts::sub_spec_font_flag[1]);
			read_value(json[xs("fonts")][xs("sub_spec_font_flag[2]")], fonts::sub_spec_font_flag[2]);
			read_value(json[xs("fonts")][xs("sub_spec_font_flag[3]")], fonts::sub_spec_font_flag[3]);
			read_value(json[xs("fonts")][xs("sub_spec_font_flag[4]")], fonts::sub_spec_font_flag[4]);
			read_value(json[xs("fonts")][xs("sub_spec_font_flag[5]")], fonts::sub_spec_font_flag[5]);
			read_value(json[xs("fonts")][xs("sub_spec_font_flag[6]")], fonts::sub_spec_font_flag[6]);
			read_value(json[xs("fonts")][xs("sub_spec_font_flag[7]")], fonts::sub_spec_font_flag[7]);
			read_value(json[xs("fonts")][xs("sub_spec_font_flag[8]")], fonts::sub_spec_font_flag[8]);
			read_value(json[xs("fonts")][xs("sub_spec_font_flag[9]")], fonts::sub_spec_font_flag[9]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[0]")], fonts::sub_indi_font_flag[0]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[1]")], fonts::sub_indi_font_flag[1]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[2]")], fonts::sub_indi_font_flag[2]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[3]")], fonts::sub_indi_font_flag[3]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[4]")], fonts::sub_indi_font_flag[4]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[5]")], fonts::sub_indi_font_flag[5]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[6]")], fonts::sub_indi_font_flag[6]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[7]")], fonts::sub_indi_font_flag[7]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[8]")], fonts::sub_indi_font_flag[8]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[9]")], fonts::sub_indi_font_flag[9]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[10]")], fonts::sub_indi_font_flag[10]);
			read_value(json[xs("fonts")][xs("sub_indi_font_flag[11]")], fonts::sub_indi_font_flag[11]);
			read_value(json[xs("fonts")][xs("indi_font_flag[0]")], fonts::indi_font_flag[0]);
			read_value(json[xs("fonts")][xs("indi_font_flag[1]")], fonts::indi_font_flag[1]);
			read_value(json[xs("fonts")][xs("indi_font_flag[2]")], fonts::indi_font_flag[2]);
			read_value(json[xs("fonts")][xs("indi_font_flag[3]")], fonts::indi_font_flag[3]);
			read_value(json[xs("fonts")][xs("indi_font_flag[4]")], fonts::indi_font_flag[4]);
			read_value(json[xs("fonts")][xs("indi_font_flag[5]")], fonts::indi_font_flag[5]);
			read_value(json[xs("fonts")][xs("indi_font_flag[6]")], fonts::indi_font_flag[6]);
			read_value(json[xs("fonts")][xs("indi_font_flag[7]")], fonts::indi_font_flag[7]);
			read_value(json[xs("fonts")][xs("indi_font_flag[8]")], fonts::indi_font_flag[8]);
			read_value(json[xs("fonts")][xs("indi_font_flag[9]")], fonts::indi_font_flag[9]);
			read_value(json[xs("fonts")][xs("indi_font_flag[10]")], fonts::indi_font_flag[10]);
			read_value(json[xs("fonts")][xs("indi_font_flag[11]")], fonts::indi_font_flag[11]);
			read_value(json[xs("fonts")][xs("esp_font_flag[0]")], fonts::esp_font_flag[0]);
			read_value(json[xs("fonts")][xs("esp_font_flag[1]")], fonts::esp_font_flag[1]);
			read_value(json[xs("fonts")][xs("esp_font_flag[2]")], fonts::esp_font_flag[2]);
			read_value(json[xs("fonts")][xs("esp_font_flag[3]")], fonts::esp_font_flag[3]);
			read_value(json[xs("fonts")][xs("esp_font_flag[4]")], fonts::esp_font_flag[4]);
			read_value(json[xs("fonts")][xs("esp_font_flag[5]")], fonts::esp_font_flag[5]);
			read_value(json[xs("fonts")][xs("esp_font_flag[6]")], fonts::esp_font_flag[6]);
			read_value(json[xs("fonts")][xs("esp_font_flag[7]")], fonts::esp_font_flag[7]);
			read_value(json[xs("fonts")][xs("esp_font_flag[8]")], fonts::esp_font_flag[8]);
			read_value(json[xs("fonts")][xs("esp_font_flag[9]")], fonts::esp_font_flag[9]);
			read_value(json[xs("fonts")][xs("esp_font_flag[10]")], fonts::esp_font_flag[10]);
			read_value(json[xs("fonts")][xs("esp_font_flag[11]")], fonts::esp_font_flag[11]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[0]")], fonts::esp_name_font_flag[0]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[1]")], fonts::esp_name_font_flag[1]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[2]")], fonts::esp_name_font_flag[2]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[3]")], fonts::esp_name_font_flag[3]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[4]")], fonts::esp_name_font_flag[4]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[5]")], fonts::esp_name_font_flag[5]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[6]")], fonts::esp_name_font_flag[6]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[7]")], fonts::esp_name_font_flag[7]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[8]")], fonts::esp_name_font_flag[8]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[9]")], fonts::esp_name_font_flag[9]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[10]")], fonts::esp_name_font_flag[10]);
			read_value(json[xs("fonts")][xs("esp_name_font_flag[11]")], fonts::esp_name_font_flag[11]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[0]")], fonts::esp_wpn_font_flag[0]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[1]")], fonts::esp_wpn_font_flag[1]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[2]")], fonts::esp_wpn_font_flag[2]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[3]")], fonts::esp_wpn_font_flag[3]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[4]")], fonts::esp_wpn_font_flag[4]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[5]")], fonts::esp_wpn_font_flag[5]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[6]")], fonts::esp_wpn_font_flag[6]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[7]")], fonts::esp_wpn_font_flag[7]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[8]")], fonts::esp_wpn_font_flag[8]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[9]")], fonts::esp_wpn_font_flag[9]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[10]")], fonts::esp_wpn_font_flag[10]);
			read_value(json[xs("fonts")][xs("esp_wpn_font_flag[11]")], fonts::esp_wpn_font_flag[11]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[0]")], fonts::esp_dropped_wpn_font_flag[0]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[1]")], fonts::esp_dropped_wpn_font_flag[1]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[2]")], fonts::esp_dropped_wpn_font_flag[2]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[3]")], fonts::esp_dropped_wpn_font_flag[3]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[4]")], fonts::esp_dropped_wpn_font_flag[4]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[5]")], fonts::esp_dropped_wpn_font_flag[5]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[6]")], fonts::esp_dropped_wpn_font_flag[6]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[7]")], fonts::esp_dropped_wpn_font_flag[7]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[8]")], fonts::esp_dropped_wpn_font_flag[8]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[9]")], fonts::esp_dropped_wpn_font_flag[9]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[10]")], fonts::esp_dropped_wpn_font_flag[10]);
			read_value(json[xs("fonts")][xs("esp_dropped_wpn_font_flag[11]")], fonts::esp_dropped_wpn_font_flag[11]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[0]")], fonts::sc_logs_flag[0]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[1]")], fonts::sc_logs_flag[1]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[2]")], fonts::sc_logs_flag[2]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[3]")], fonts::sc_logs_flag[3]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[4]")], fonts::sc_logs_flag[4]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[5]")], fonts::sc_logs_flag[5]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[6]")], fonts::sc_logs_flag[6]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[7]")], fonts::sc_logs_flag[7]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[8]")], fonts::sc_logs_flag[8]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[9]")], fonts::sc_logs_flag[9]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[10]")], fonts::sc_logs_flag[10]);
			read_value(json[xs("fonts")][xs("sc_logs_flag[11]")], fonts::sc_logs_flag[11]);
			read_value(json[xs("sfui")][xs("sfui_on")], sfui::sfui_on);

		}

		path.erase(path.size() - configs.at(index).size() - 5);
	}
}